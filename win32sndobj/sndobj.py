# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sndobj', [dirname(__file__)])
        except ImportError:
            import _sndobj
            return _sndobj
        if fp is not None:
            try:
                _mod = imp.load_module('_sndobj', fp, pathname, description)
            finally:
                fp.close()
                return _mod
    _sndobj = swig_import_helper()
    del swig_import_helper
else:
    import _sndobj
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class msg_link(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msg_link, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msg_link, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg"] = _sndobj.msg_link_msg_set
    __swig_getmethods__["msg"] = _sndobj.msg_link_msg_get
    if _newclass:msg = _swig_property(_sndobj.msg_link_msg_get, _sndobj.msg_link_msg_set)
    __swig_setmethods__["ID"] = _sndobj.msg_link_ID_set
    __swig_getmethods__["ID"] = _sndobj.msg_link_ID_get
    if _newclass:ID = _swig_property(_sndobj.msg_link_ID_get, _sndobj.msg_link_ID_set)
    __swig_setmethods__["previous"] = _sndobj.msg_link_previous_set
    __swig_getmethods__["previous"] = _sndobj.msg_link_previous_get
    if _newclass:previous = _swig_property(_sndobj.msg_link_previous_get, _sndobj.msg_link_previous_set)
    def __init__(self): 
        this = _sndobj.new_msg_link()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_msg_link
    __del__ = lambda self : None;
msg_link_swigregister = _sndobj.msg_link_swigregister
msg_link_swigregister(msg_link)
cvar = _sndobj.cvar
PI = cvar.PI
DEF_FFTSIZE = cvar.DEF_FFTSIZE
DEF_VECSIZE = cvar.DEF_VECSIZE
DEF_SR = cvar.DEF_SR

class SndObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SndObj, name)
    __repr__ = _swig_repr
    def IsProcessing(self): return _sndobj.SndObj_IsProcessing(self)
    def GetError(self): return _sndobj.SndObj_GetError(self)
    def __iadd__(self, *args): return _sndobj.SndObj___iadd__(self, *args)
    def __isub__(self, *args): return _sndobj.SndObj___isub__(self, *args)
    def __imul__(self, *args): return _sndobj.SndObj___imul__(self, *args)
    def __add__(self, *args): return _sndobj.SndObj___add__(self, *args)
    def __sub__(self, *args): return _sndobj.SndObj___sub__(self, *args)
    def __mul__(self, *args): return _sndobj.SndObj___mul__(self, *args)
    def __rshift__(self, *args): return _sndobj.SndObj___rshift__(self, *args)
    def __lshift__(self, *args): return _sndobj.SndObj___lshift__(self, *args)
    def PushIn(self, *args): return _sndobj.SndObj_PushIn(self, *args)
    def PopOut(self, *args): return _sndobj.SndObj_PopOut(self, *args)
    def AddOut(self, *args): return _sndobj.SndObj_AddOut(self, *args)
    def GetMsgList(self, *args): return _sndobj.SndObj_GetMsgList(self, *args)
    def Enable(self): return _sndobj.SndObj_Enable(self)
    def Disable(self): return _sndobj.SndObj_Disable(self)
    def Output(self, *args): return _sndobj.SndObj_Output(self, *args)
    def GetVectorSize(self): return _sndobj.SndObj_GetVectorSize(self)
    def SetVectorSize(self, *args): return _sndobj.SndObj_SetVectorSize(self, *args)
    def LimitVectorSize(self, *args): return _sndobj.SndObj_LimitVectorSize(self, *args)
    def RestoreVectorSize(self): return _sndobj.SndObj_RestoreVectorSize(self)
    def GetSr(self): return _sndobj.SndObj_GetSr(self)
    def SetSr(self, *args): return _sndobj.SndObj_SetSr(self, *args)
    def Set(self, *args): return _sndobj.SndObj_Set(self, *args)
    def Connect(self, *args): return _sndobj.SndObj_Connect(self, *args)
    def SetInput(self, *args): return _sndobj.SndObj_SetInput(self, *args)
    def GetInput(self): return _sndobj.SndObj_GetInput(self)
    def __init__(self, *args): 
        this = _sndobj.new_SndObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndObj
    __del__ = lambda self : None;
    def ErrorMessage(self): return _sndobj.SndObj_ErrorMessage(self)
    def CErrorMessage(self): return _sndobj.SndObj_CErrorMessage(self)
    def DoProcess(self): return _sndobj.SndObj_DoProcess(self)
SndObj_swigregister = _sndobj.SndObj_swigregister
SndObj_swigregister(SndObj)

FLOATSAM = _sndobj.FLOATSAM
BYTESAM = _sndobj.BYTESAM
SHORTSAM_LE = _sndobj.SHORTSAM_LE
SND_INPUT = _sndobj.SND_INPUT
SND_OUTPUT = _sndobj.SND_OUTPUT
SND_IO = _sndobj.SND_IO
class _24Bit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _24Bit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _24Bit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["s"] = _sndobj._24Bit_s_set
    __swig_getmethods__["s"] = _sndobj._24Bit_s_get
    if _newclass:s = _swig_property(_sndobj._24Bit_s_get, _sndobj._24Bit_s_set)
    def __init__(self): 
        this = _sndobj.new__24Bit()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete__24Bit
    __del__ = lambda self : None;
_24Bit_swigregister = _sndobj._24Bit_swigregister
_24Bit_swigregister(_24Bit)
SHORTSAM_BE = cvar.SHORTSAM_BE
S24LE = cvar.S24LE
S24BE = cvar.S24BE
LONGSAM = cvar.LONGSAM
SHORTSAM = cvar.SHORTSAM

class SndIO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndIO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SndIO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_sampsize"] = _sndobj.SndIO_m_sampsize_set
    __swig_getmethods__["m_sampsize"] = _sndobj.SndIO_m_sampsize_get
    if _newclass:m_sampsize = _swig_property(_sndobj.SndIO_m_sampsize_get, _sndobj.SndIO_m_sampsize_set)
    def GetSr(self): return _sndobj.SndIO_GetSr(self)
    def GetVectorSize(self): return _sndobj.SndIO_GetVectorSize(self)
    def SetVectorSize(self, *args): return _sndobj.SndIO_SetVectorSize(self, *args)
    def LimitVectorSize(self, *args): return _sndobj.SndIO_LimitVectorSize(self, *args)
    def RestoreVectorSize(self): return _sndobj.SndIO_RestoreVectorSize(self)
    def GetChannels(self): return _sndobj.SndIO_GetChannels(self)
    def GetSize(self): return _sndobj.SndIO_GetSize(self)
    def Output(self, *args): return _sndobj.SndIO_Output(self, *args)
    def SetOutput(self, *args): return _sndobj.SndIO_SetOutput(self, *args)
    def __init__(self, *args): 
        this = _sndobj.new_SndIO(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndIO
    __del__ = lambda self : None;
    def Read(self): return _sndobj.SndIO_Read(self)
    def Write(self): return _sndobj.SndIO_Write(self)
    def ErrorMessage(self): return _sndobj.SndIO_ErrorMessage(self)
    def Error(self): return _sndobj.SndIO_Error(self)
SndIO_swigregister = _sndobj.SndIO_swigregister
SndIO_swigregister(SndIO)

class Table(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Table, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def GetLen(self): return _sndobj.Table_GetLen(self)
    def GetTable(self): return _sndobj.Table_GetTable(self)
    def Lookup(self, *args): return _sndobj.Table_Lookup(self, *args)
    __swig_destroy__ = _sndobj.delete_Table
    __del__ = lambda self : None;
    def ErrorMessage(self): return _sndobj.Table_ErrorMessage(self)
    def MakeTable(self): return _sndobj.Table_MakeTable(self)
Table_swigregister = _sndobj.Table_swigregister
Table_swigregister(Table)
TWOPI = cvar.TWOPI


def new_intp(*args):
  return _sndobj.new_intp(*args)
new_intp = _sndobj.new_intp

def delete_intp(*args):
  return _sndobj.delete_intp(*args)
delete_intp = _sndobj.delete_intp

def intp_getitem(*args):
  return _sndobj.intp_getitem(*args)
intp_getitem = _sndobj.intp_getitem

def intp_setitem(*args):
  return _sndobj.intp_setitem(*args)
intp_setitem = _sndobj.intp_setitem

def new_floatp(*args):
  return _sndobj.new_floatp(*args)
new_floatp = _sndobj.new_floatp

def delete_floatp(*args):
  return _sndobj.delete_floatp(*args)
delete_floatp = _sndobj.delete_floatp

def floatp_getitem(*args):
  return _sndobj.floatp_getitem(*args)
floatp_getitem = _sndobj.floatp_getitem

def floatp_setitem(*args):
  return _sndobj.floatp_setitem(*args)
floatp_setitem = _sndobj.floatp_setitem

def new_doublep(*args):
  return _sndobj.new_doublep(*args)
new_doublep = _sndobj.new_doublep

def delete_doublep(*args):
  return _sndobj.delete_doublep(*args)
delete_doublep = _sndobj.delete_doublep

def doublep_getitem(*args):
  return _sndobj.doublep_getitem(*args)
doublep_getitem = _sndobj.doublep_getitem

def doublep_setitem(*args):
  return _sndobj.doublep_setitem(*args)
doublep_setitem = _sndobj.doublep_setitem
class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _sndobj.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _sndobj.intArray___setitem__(self, *args)
    def cast(self): return _sndobj.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _sndobj.intArray_frompointer
    if _newclass:frompointer = staticmethod(_sndobj.intArray_frompointer)
intArray_swigregister = _sndobj.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _sndobj.intArray_frompointer(*args)
intArray_frompointer = _sndobj.intArray_frompointer

class floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_floatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_floatArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _sndobj.floatArray___getitem__(self, *args)
    def __setitem__(self, *args): return _sndobj.floatArray___setitem__(self, *args)
    def cast(self): return _sndobj.floatArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _sndobj.floatArray_frompointer
    if _newclass:frompointer = staticmethod(_sndobj.floatArray_frompointer)
floatArray_swigregister = _sndobj.floatArray_swigregister
floatArray_swigregister(floatArray)

def floatArray_frompointer(*args):
  return _sndobj.floatArray_frompointer(*args)
floatArray_frompointer = _sndobj.floatArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _sndobj.doubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _sndobj.doubleArray___setitem__(self, *args)
    def cast(self): return _sndobj.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _sndobj.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_sndobj.doubleArray_frompointer)
doubleArray_swigregister = _sndobj.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args):
  return _sndobj.doubleArray_frompointer(*args)
doubleArray_frompointer = _sndobj.doubleArray_frompointer

class sndobjArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sndobjArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sndobjArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_sndobjArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_sndobjArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _sndobj.sndobjArray___getitem__(self, *args)
    def __setitem__(self, *args): return _sndobj.sndobjArray___setitem__(self, *args)
    def cast(self): return _sndobj.sndobjArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _sndobj.sndobjArray_frompointer
    if _newclass:frompointer = staticmethod(_sndobj.sndobjArray_frompointer)
sndobjArray_swigregister = _sndobj.sndobjArray_swigregister
sndobjArray_swigregister(sndobjArray)

def sndobjArray_frompointer(*args):
  return _sndobj.sndobjArray_frompointer(*args)
sndobjArray_frompointer = _sndobj.sndobjArray_frompointer

SNDIO_IN = _sndobj.SNDIO_IN
SNDIO_OUT = _sndobj.SNDIO_OUT
OFF = _sndobj.OFF
ON = _sndobj.ON
class SndThread(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndThread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SndThread, name)
    __repr__ = _swig_repr
    def GetProcessCallback(self): return _sndobj.SndThread_GetProcessCallback(self)
    def __init__(self, *args): 
        this = _sndobj.new_SndThread(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndThread
    __del__ = lambda self : None;
    def AddObj(self, *args): return _sndobj.SndThread_AddObj(self, *args)
    def Insert(self, *args): return _sndobj.SndThread_Insert(self, *args)
    def DeleteObj(self, *args): return _sndobj.SndThread_DeleteObj(self, *args)
    def GetStatus(self): return _sndobj.SndThread_GetStatus(self)
    def GetSndObjNo(self): return _sndobj.SndThread_GetSndObjNo(self)
    def GetInputNo(self): return _sndobj.SndThread_GetInputNo(self)
    def GetOutputNo(self): return _sndobj.SndThread_GetOutputNo(self)
    def GetAttrib(self): return _sndobj.SndThread_GetAttrib(self)
    def SetAttrib(self, *args): return _sndobj.SndThread_SetAttrib(self, *args)
    def SetVectorSize(self, *args): return _sndobj.SndThread_SetVectorSize(self, *args)
    def LimitVectorSize(self, *args): return _sndobj.SndThread_LimitVectorSize(self, *args)
    def RestoreVectorSize(self): return _sndobj.SndThread_RestoreVectorSize(self)
    def SetSr(self, *args): return _sndobj.SndThread_SetSr(self, *args)
    def ProcOn(self): return _sndobj.SndThread_ProcOn(self)
    def ProcOff(self): return _sndobj.SndThread_ProcOff(self)
    def SetProcessCallback(self, *args): return _sndobj.SndThread_SetProcessCallback(self, *args)
SndThread_swigregister = _sndobj.SndThread_swigregister
SndThread_swigregister(SndThread)

def threadfunc(*args):
  return _sndobj.threadfunc(*args)
threadfunc = _sndobj.threadfunc

class SndRTThread(SndThread):
    __swig_setmethods__ = {}
    for _s in [SndThread]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndRTThread, name, value)
    __swig_getmethods__ = {}
    for _s in [SndThread]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SndRTThread, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SndRTThread(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndRTThread
    __del__ = lambda self : None;
    def AddOutput(self, *args): return _sndobj.SndRTThread_AddOutput(self, *args)
    def DeleteOutput(self, *args): return _sndobj.SndRTThread_DeleteOutput(self, *args)
    def DisconnectOutput(self, *args): return _sndobj.SndRTThread_DisconnectOutput(self, *args)
    def ConnectOutput(self, *args): return _sndobj.SndRTThread_ConnectOutput(self, *args)
    def GetInput(self, *args): return _sndobj.SndRTThread_GetInput(self, *args)
    def Direct(self, *args): return _sndobj.SndRTThread_Direct(self, *args)
    def SetProcessCallback(self, *args): return _sndobj.SndRTThread_SetProcessCallback(self, *args)
SndRTThread_swigregister = _sndobj.SndRTThread_swigregister
SndRTThread_swigregister(SndRTThread)

def rtthreadfunc(*args):
  return _sndobj.rtthreadfunc(*args)
rtthreadfunc = _sndobj.rtthreadfunc

class Oscil(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Oscil, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Oscil, name)
    __repr__ = _swig_repr
    def SetSr(self, *args): return _sndobj.Oscil_SetSr(self, *args)
    __swig_setmethods__["m_factor"] = _sndobj.Oscil_m_factor_set
    __swig_getmethods__["m_factor"] = _sndobj.Oscil_m_factor_get
    if _newclass:m_factor = _swig_property(_sndobj.Oscil_m_factor_get, _sndobj.Oscil_m_factor_set)
    def __init__(self, *args): 
        this = _sndobj.new_Oscil(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Oscil
    __del__ = lambda self : None;
    def SetPhase(self, *args): return _sndobj.Oscil_SetPhase(self, *args)
    def SetTable(self, *args): return _sndobj.Oscil_SetTable(self, *args)
    def SetFreq(self, *args): return _sndobj.Oscil_SetFreq(self, *args)
    def SetAmp(self, *args): return _sndobj.Oscil_SetAmp(self, *args)
    def Connect(self, *args): return _sndobj.Oscil_Connect(self, *args)
    def Set(self, *args): return _sndobj.Oscil_Set(self, *args)
    def DoProcess(self): return _sndobj.Oscil_DoProcess(self)
Oscil_swigregister = _sndobj.Oscil_swigregister
Oscil_swigregister(Oscil)

class Oscilt(Oscil):
    __swig_setmethods__ = {}
    for _s in [Oscil]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Oscilt, name, value)
    __swig_getmethods__ = {}
    for _s in [Oscil]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Oscilt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Oscilt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Oscilt
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.Oscilt_DoProcess(self)
Oscilt_swigregister = _sndobj.Oscilt_swigregister
Oscilt_swigregister(Oscilt)

class Oscili(Oscil):
    __swig_setmethods__ = {}
    for _s in [Oscil]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Oscili, name, value)
    __swig_getmethods__ = {}
    for _s in [Oscil]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Oscili, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Oscili(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Oscili
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.Oscili_DoProcess(self)
Oscili_swigregister = _sndobj.Oscili_swigregister
Oscili_swigregister(Oscili)

class FastOsc(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FastOsc, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FastOsc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_FastOsc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_FastOsc
    __del__ = lambda self : None;
    def SetFreq(self, *args): return _sndobj.FastOsc_SetFreq(self, *args)
    def SetAmp(self, *args): return _sndobj.FastOsc_SetAmp(self, *args)
    def SetPhase(self, *args): return _sndobj.FastOsc_SetPhase(self, *args)
    def SetTable(self, *args): return _sndobj.FastOsc_SetTable(self, *args)
    def Set(self, *args): return _sndobj.FastOsc_Set(self, *args)
    def Connect(self, *args): return _sndobj.FastOsc_Connect(self, *args)
    def SetSr(self, *args): return _sndobj.FastOsc_SetSr(self, *args)
    def DoProcess(self): return _sndobj.FastOsc_DoProcess(self)
FastOsc_swigregister = _sndobj.FastOsc_swigregister
FastOsc_swigregister(FastOsc)
phasemask = cvar.phasemask
maxlength = cvar.maxlength

class Osc(FastOsc):
    __swig_setmethods__ = {}
    for _s in [FastOsc]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Osc, name, value)
    __swig_getmethods__ = {}
    for _s in [FastOsc]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Osc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Osc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Osc
    __del__ = lambda self : None;
    def SetFreq(self, *args): return _sndobj.Osc_SetFreq(self, *args)
    def SetAmp(self, *args): return _sndobj.Osc_SetAmp(self, *args)
    def Connect(self, *args): return _sndobj.Osc_Connect(self, *args)
    def DoProcess(self): return _sndobj.Osc_DoProcess(self)
Osc_swigregister = _sndobj.Osc_swigregister
Osc_swigregister(Osc)

class Osci(Osc):
    __swig_setmethods__ = {}
    for _s in [Osc]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Osci, name, value)
    __swig_getmethods__ = {}
    for _s in [Osc]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Osci, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Osci(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Osci
    __del__ = lambda self : None;
    def SetTable(self, *args): return _sndobj.Osci_SetTable(self, *args)
    def Connect(self, *args): return _sndobj.Osci_Connect(self, *args)
    def DoProcess(self): return _sndobj.Osci_DoProcess(self)
Osci_swigregister = _sndobj.Osci_swigregister
Osci_swigregister(Osci)

class SndIn(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndIn, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SndIn, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SndIn(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndIn
    __del__ = lambda self : None;
    def SetInput(self, *args): return _sndobj.SndIn_SetInput(self, *args)
    def Connect(self, *args): return _sndobj.SndIn_Connect(self, *args)
    def Set(self, *args): return _sndobj.SndIn_Set(self, *args)
    def DoProcess(self): return _sndobj.SndIn_DoProcess(self)
    def ErrorMessage(self): return _sndobj.SndIn_ErrorMessage(self)
SndIn_swigregister = _sndobj.SndIn_swigregister
SndIn_swigregister(SndIn)

class SndRead(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndRead, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SndRead, name)
    __repr__ = _swig_repr
    def Outchannel(self, *args): return _sndobj.SndRead_Outchannel(self, *args)
    def __init__(self, *args): 
        this = _sndobj.new_SndRead(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndRead
    __del__ = lambda self : None;
    def SetInput(self, *args): return _sndobj.SndRead_SetInput(self, *args)
    def SetScale(self, *args): return _sndobj.SndRead_SetScale(self, *args)
    def SetPitch(self, *args): return _sndobj.SndRead_SetPitch(self, *args)
    def Set(self, *args): return _sndobj.SndRead_Set(self, *args)
    def DoProcess(self): return _sndobj.SndRead_DoProcess(self)
SndRead_swigregister = _sndobj.SndRead_swigregister
SndRead_swigregister(SndRead)

class MidiIn(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MidiIn, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MidiIn, name)
    __repr__ = _swig_repr
    def SetMessage(self, *args): return _sndobj.MidiIn_SetMessage(self, *args)
    def SetChannel(self, *args): return _sndobj.MidiIn_SetChannel(self, *args)
    def SetMidiInput(self, *args): return _sndobj.MidiIn_SetMidiInput(self, *args)
    def Set(self, *args): return _sndobj.MidiIn_Set(self, *args)
    def Connect(self, *args): return _sndobj.MidiIn_Connect(self, *args)
    def __init__(self, *args): 
        this = _sndobj.new_MidiIn(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_MidiIn
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.MidiIn_DoProcess(self)
    def ErrorMessage(self): return _sndobj.MidiIn_ErrorMessage(self)
MidiIn_swigregister = _sndobj.MidiIn_swigregister
MidiIn_swigregister(MidiIn)

class Bend(MidiIn):
    __swig_setmethods__ = {}
    for _s in [MidiIn]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bend, name, value)
    __swig_getmethods__ = {}
    for _s in [MidiIn]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bend, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Bend(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Bend
    __del__ = lambda self : None;
    def SetRange(self, *args): return _sndobj.Bend_SetRange(self, *args)
    def Set(self, *args): return _sndobj.Bend_Set(self, *args)
    def DoProcess(self): return _sndobj.Bend_DoProcess(self)
Bend_swigregister = _sndobj.Bend_swigregister
Bend_swigregister(Bend)

class MidiMap(MidiIn):
    __swig_setmethods__ = {}
    for _s in [MidiIn]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MidiMap, name, value)
    __swig_getmethods__ = {}
    for _s in [MidiIn]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MidiMap, name)
    __repr__ = _swig_repr
    def SetTable(self, *args): return _sndobj.MidiMap_SetTable(self, *args)
    def SetRange(self, *args): return _sndobj.MidiMap_SetRange(self, *args)
    def Set(self, *args): return _sndobj.MidiMap_Set(self, *args)
    def Connect(self, *args): return _sndobj.MidiMap_Connect(self, *args)
    def __init__(self, *args): 
        this = _sndobj.new_MidiMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_MidiMap
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.MidiMap_DoProcess(self)
    def ErrorMessage(self): return _sndobj.MidiMap_ErrorMessage(self)
MidiMap_swigregister = _sndobj.MidiMap_swigregister
MidiMap_swigregister(MidiMap)

class ADSR(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADSR, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ADSR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_ADSR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_ADSR
    __del__ = lambda self : None;
    def SetSr(self, *args): return _sndobj.ADSR_SetSr(self, *args)
    def SetMaxAmp(self, *args): return _sndobj.ADSR_SetMaxAmp(self, *args)
    def Sustain(self): return _sndobj.ADSR_Sustain(self)
    def Release(self): return _sndobj.ADSR_Release(self)
    def Restart(self): return _sndobj.ADSR_Restart(self)
    def SetADSR(self, *args): return _sndobj.ADSR_SetADSR(self, *args)
    def SetDur(self, *args): return _sndobj.ADSR_SetDur(self, *args)
    def Set(self, *args): return _sndobj.ADSR_Set(self, *args)
    def DoProcess(self): return _sndobj.ADSR_DoProcess(self)
ADSR_swigregister = _sndobj.ADSR_swigregister
ADSR_swigregister(ADSR)

class IADSR(ADSR):
    __swig_setmethods__ = {}
    for _s in [ADSR]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IADSR, name, value)
    __swig_getmethods__ = {}
    for _s in [ADSR]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IADSR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_IADSR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_IADSR
    __del__ = lambda self : None;
    def SetInit(self, *args): return _sndobj.IADSR_SetInit(self, *args)
    def SetEnd(self, *args): return _sndobj.IADSR_SetEnd(self, *args)
    def Set(self, *args): return _sndobj.IADSR_Set(self, *args)
    def DoProcess(self): return _sndobj.IADSR_DoProcess(self)
IADSR_swigregister = _sndobj.IADSR_swigregister
IADSR_swigregister(IADSR)

class Buzz(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Buzz, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Buzz, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Buzz(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Buzz
    __del__ = lambda self : None;
    def SetFreq(self, *args): return _sndobj.Buzz_SetFreq(self, *args)
    def SetAmp(self, *args): return _sndobj.Buzz_SetAmp(self, *args)
    def SetSr(self, *args): return _sndobj.Buzz_SetSr(self, *args)
    def SetHarm(self, *args): return _sndobj.Buzz_SetHarm(self, *args)
    def Set(self, *args): return _sndobj.Buzz_Set(self, *args)
    def Connect(self, *args): return _sndobj.Buzz_Connect(self, *args)
    def ErrorMessage(self): return _sndobj.Buzz_ErrorMessage(self)
    def DoProcess(self): return _sndobj.Buzz_DoProcess(self)
Buzz_swigregister = _sndobj.Buzz_swigregister
Buzz_swigregister(Buzz)

class Balance(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Balance, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Balance, name)
    __repr__ = _swig_repr
    def SetInput(self, *args): return _sndobj.Balance_SetInput(self, *args)
    def SetLPFreq(self, *args): return _sndobj.Balance_SetLPFreq(self, *args)
    def SetSr(self, *args): return _sndobj.Balance_SetSr(self, *args)
    def Set(self, *args): return _sndobj.Balance_Set(self, *args)
    def __init__(self, *args): 
        this = _sndobj.new_Balance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Balance
    __del__ = lambda self : None;
    def ErrorMessage(self): return _sndobj.Balance_ErrorMessage(self)
    def DoProcess(self): return _sndobj.Balance_DoProcess(self)
    def Connect(self, *args): return _sndobj.Balance_Connect(self, *args)
Balance_swigregister = _sndobj.Balance_swigregister
Balance_swigregister(Balance)

class DelayLine(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DelayLine, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DelayLine, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_DelayLine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_DelayLine
    __del__ = lambda self : None;
    def Buffer(self): return _sndobj.DelayLine_Buffer(self)
    def GetWritePointerPos(self): return _sndobj.DelayLine_GetWritePointerPos(self)
    def GetDelayTime(self): return _sndobj.DelayLine_GetDelayTime(self)
    def SetSr(self, *args): return _sndobj.DelayLine_SetSr(self, *args)
    def Reset(self): return _sndobj.DelayLine_Reset(self)
    def SetDelayTime(self, *args): return _sndobj.DelayLine_SetDelayTime(self, *args)
    def Set(self, *args): return _sndobj.DelayLine_Set(self, *args)
    def DoProcess(self): return _sndobj.DelayLine_DoProcess(self)
    def ErrorMessage(self): return _sndobj.DelayLine_ErrorMessage(self)
DelayLine_swigregister = _sndobj.DelayLine_swigregister
DelayLine_swigregister(DelayLine)

class Tap(DelayLine):
    __swig_setmethods__ = {}
    for _s in [DelayLine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tap, name, value)
    __swig_getmethods__ = {}
    for _s in [DelayLine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Tap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Tap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Tap
    __del__ = lambda self : None;
    def SetDelayTime(self, *args): return _sndobj.Tap_SetDelayTime(self, *args)
    def SetDelayTap(self, *args): return _sndobj.Tap_SetDelayTap(self, *args)
    def Set(self, *args): return _sndobj.Tap_Set(self, *args)
    def Connect(self, *args): return _sndobj.Tap_Connect(self, *args)
    def DoProcess(self): return _sndobj.Tap_DoProcess(self)
    def ErrorMessage(self): return _sndobj.Tap_ErrorMessage(self)
Tap_swigregister = _sndobj.Tap_swigregister
Tap_swigregister(Tap)

class Tapi(Tap):
    __swig_setmethods__ = {}
    for _s in [Tap]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tapi, name, value)
    __swig_getmethods__ = {}
    for _s in [Tap]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Tapi, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Tapi(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Tapi
    __del__ = lambda self : None;
    def SetDelayInput(self, *args): return _sndobj.Tapi_SetDelayInput(self, *args)
    def Connect(self, *args): return _sndobj.Tapi_Connect(self, *args)
    def DoProcess(self): return _sndobj.Tapi_DoProcess(self)
Tapi_swigregister = _sndobj.Tapi_swigregister
Tapi_swigregister(Tapi)

class Comb(DelayLine):
    __swig_setmethods__ = {}
    for _s in [DelayLine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Comb, name, value)
    __swig_getmethods__ = {}
    for _s in [DelayLine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Comb, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Comb(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Comb
    __del__ = lambda self : None;
    def SetGain(self, *args): return _sndobj.Comb_SetGain(self, *args)
    def Set(self, *args): return _sndobj.Comb_Set(self, *args)
    def DoProcess(self): return _sndobj.Comb_DoProcess(self)
Comb_swigregister = _sndobj.Comb_swigregister
Comb_swigregister(Comb)

class Allpass(Comb):
    __swig_setmethods__ = {}
    for _s in [Comb]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Allpass, name, value)
    __swig_getmethods__ = {}
    for _s in [Comb]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Allpass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Allpass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Allpass
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.Allpass_DoProcess(self)
Allpass_swigregister = _sndobj.Allpass_swigregister
Allpass_swigregister(Allpass)

class StringFlt(DelayLine):
    __swig_setmethods__ = {}
    for _s in [DelayLine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringFlt, name, value)
    __swig_getmethods__ = {}
    for _s in [DelayLine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringFlt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_StringFlt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_StringFlt
    __del__ = lambda self : None;
    def SetSr(self, *args): return _sndobj.StringFlt_SetSr(self, *args)
    def SetDecay(self, *args): return _sndobj.StringFlt_SetDecay(self, *args)
    def SetFreq(self, *args): return _sndobj.StringFlt_SetFreq(self, *args)
    def SetFdbgain(self, *args): return _sndobj.StringFlt_SetFdbgain(self, *args)
    def Set(self, *args): return _sndobj.StringFlt_Set(self, *args)
    def Connect(self, *args): return _sndobj.StringFlt_Connect(self, *args)
    def DoProcess(self): return _sndobj.StringFlt_DoProcess(self)
StringFlt_swigregister = _sndobj.StringFlt_swigregister
StringFlt_swigregister(StringFlt)

class Pluck(StringFlt):
    __swig_setmethods__ = {}
    for _s in [StringFlt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pluck, name, value)
    __swig_getmethods__ = {}
    for _s in [StringFlt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pluck, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Pluck(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Pluck
    __del__ = lambda self : None;
    def RePluck(self): return _sndobj.Pluck_RePluck(self)
    def Set(self, *args): return _sndobj.Pluck_Set(self, *args)
    def SetAmp(self, *args): return _sndobj.Pluck_SetAmp(self, *args)
    def DoProcess(self): return _sndobj.Pluck_DoProcess(self)
Pluck_swigregister = _sndobj.Pluck_swigregister
Pluck_swigregister(Pluck)

class VDelay(DelayLine):
    __swig_setmethods__ = {}
    for _s in [DelayLine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VDelay, name, value)
    __swig_getmethods__ = {}
    for _s in [DelayLine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VDelay, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_VDelay(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_VDelay
    __del__ = lambda self : None;
    def Set(self, *args): return _sndobj.VDelay_Set(self, *args)
    def Connect(self, *args): return _sndobj.VDelay_Connect(self, *args)
    def SetMaxDelayTime(self, *args): return _sndobj.VDelay_SetMaxDelayTime(self, *args)
    def SetDelayTime(self, *args): return _sndobj.VDelay_SetDelayTime(self, *args)
    def SetVdtInput(self, *args): return _sndobj.VDelay_SetVdtInput(self, *args)
    def SetFdbgain(self, *args): return _sndobj.VDelay_SetFdbgain(self, *args)
    def SetFwdgain(self, *args): return _sndobj.VDelay_SetFwdgain(self, *args)
    def SetDirgain(self, *args): return _sndobj.VDelay_SetDirgain(self, *args)
    def DoProcess(self): return _sndobj.VDelay_DoProcess(self)
VDelay_swigregister = _sndobj.VDelay_swigregister
VDelay_swigregister(VDelay)

class Pitch(DelayLine):
    __swig_setmethods__ = {}
    for _s in [DelayLine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pitch, name, value)
    __swig_getmethods__ = {}
    for _s in [DelayLine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pitch, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Pitch(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Pitch
    __del__ = lambda self : None;
    def SetPitch(self, *args): return _sndobj.Pitch_SetPitch(self, *args)
    def Set(self, *args): return _sndobj.Pitch_Set(self, *args)
    def DoProcess(self): return _sndobj.Pitch_DoProcess(self)
Pitch_swigregister = _sndobj.Pitch_swigregister
Pitch_swigregister(Pitch)

class SndLoop(DelayLine):
    __swig_setmethods__ = {}
    for _s in [DelayLine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [DelayLine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SndLoop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SndLoop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndLoop
    __del__ = lambda self : None;
    def SetXFade(self, *args): return _sndobj.SndLoop_SetXFade(self, *args)
    def SetPitch(self, *args): return _sndobj.SndLoop_SetPitch(self, *args)
    def ReSample(self): return _sndobj.SndLoop_ReSample(self)
    def Set(self, *args): return _sndobj.SndLoop_Set(self, *args)
    def DoProcess(self): return _sndobj.SndLoop_DoProcess(self)
SndLoop_swigregister = _sndobj.SndLoop_swigregister
SndLoop_swigregister(SndLoop)

class FIR(DelayLine):
    __swig_setmethods__ = {}
    for _s in [DelayLine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FIR, name, value)
    __swig_getmethods__ = {}
    for _s in [DelayLine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FIR, name)
    __repr__ = _swig_repr
    def Connect(self, *args): return _sndobj.FIR_Connect(self, *args)
    def Set(self, *args): return _sndobj.FIR_Set(self, *args)
    def __init__(self, *args): 
        this = _sndobj.new_FIR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_FIR
    __del__ = lambda self : None;
    def SetTable(self, *args): return _sndobj.FIR_SetTable(self, *args)
    def SetImpulse(self, *args): return _sndobj.FIR_SetImpulse(self, *args)
    def SetDelayTime(self, *args): return _sndobj.FIR_SetDelayTime(self, *args)
    def DoProcess(self): return _sndobj.FIR_DoProcess(self)
FIR_swigregister = _sndobj.FIR_swigregister
FIR_swigregister(FIR)

class Filter(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Filter, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Filter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Filter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Filter
    __del__ = lambda self : None;
    def SetFreq(self, *args): return _sndobj.Filter_SetFreq(self, *args)
    def SetBW(self, *args): return _sndobj.Filter_SetBW(self, *args)
    def Set(self, *args): return _sndobj.Filter_Set(self, *args)
    def SetSr(self, *args): return _sndobj.Filter_SetSr(self, *args)
    def ErrorMessage(self): return _sndobj.Filter_ErrorMessage(self)
    def DoProcess(self): return _sndobj.Filter_DoProcess(self)
Filter_swigregister = _sndobj.Filter_swigregister
Filter_swigregister(Filter)

class TpTz(Filter):
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TpTz, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TpTz, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_TpTz(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_TpTz
    __del__ = lambda self : None;
    def SetParam(self, *args): return _sndobj.TpTz_SetParam(self, *args)
    def Set(self, *args): return _sndobj.TpTz_Set(self, *args)
    def DoProcess(self): return _sndobj.TpTz_DoProcess(self)
TpTz_swigregister = _sndobj.TpTz_swigregister
TpTz_swigregister(TpTz)

class Reson(Filter):
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reson, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Reson, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Reson(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetFreq(self, *args): return _sndobj.Reson_SetFreq(self, *args)
    def SetBW(self, *args): return _sndobj.Reson_SetBW(self, *args)
    __swig_destroy__ = _sndobj.delete_Reson
    __del__ = lambda self : None;
    def Connect(self, *args): return _sndobj.Reson_Connect(self, *args)
    def DoProcess(self): return _sndobj.Reson_DoProcess(self)
Reson_swigregister = _sndobj.Reson_swigregister
Reson_swigregister(Reson)

class Lp(Reson):
    __swig_setmethods__ = {}
    for _s in [Reson]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lp, name, value)
    __swig_getmethods__ = {}
    for _s in [Reson]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Lp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Lp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Lp
    __del__ = lambda self : None;
    def SetSr(self, *args): return _sndobj.Lp_SetSr(self, *args)
    def Set(self, *args): return _sndobj.Lp_Set(self, *args)
    def DoProcess(self): return _sndobj.Lp_DoProcess(self)
Lp_swigregister = _sndobj.Lp_swigregister
Lp_swigregister(Lp)

class ButtBP(TpTz):
    __swig_setmethods__ = {}
    for _s in [TpTz]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ButtBP, name, value)
    __swig_getmethods__ = {}
    for _s in [TpTz]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ButtBP, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_ButtBP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_ButtBP
    __del__ = lambda self : None;
    def Set(self, *args): return _sndobj.ButtBP_Set(self, *args)
    def SetFreq(self, *args): return _sndobj.ButtBP_SetFreq(self, *args)
    def SetBW(self, *args): return _sndobj.ButtBP_SetBW(self, *args)
    def SetSr(self, *args): return _sndobj.ButtBP_SetSr(self, *args)
    def Connect(self, *args): return _sndobj.ButtBP_Connect(self, *args)
    def DoProcess(self): return _sndobj.ButtBP_DoProcess(self)
ButtBP_swigregister = _sndobj.ButtBP_swigregister
ButtBP_swigregister(ButtBP)

class ButtBR(ButtBP):
    __swig_setmethods__ = {}
    for _s in [ButtBP]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ButtBR, name, value)
    __swig_getmethods__ = {}
    for _s in [ButtBP]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ButtBR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_ButtBR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_ButtBR
    __del__ = lambda self : None;
ButtBR_swigregister = _sndobj.ButtBR_swigregister
ButtBR_swigregister(ButtBR)

class ButtHP(ButtBP):
    __swig_setmethods__ = {}
    for _s in [ButtBP]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ButtHP, name, value)
    __swig_getmethods__ = {}
    for _s in [ButtBP]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ButtHP, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_ButtHP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_ButtHP
    __del__ = lambda self : None;
ButtHP_swigregister = _sndobj.ButtHP_swigregister
ButtHP_swigregister(ButtHP)

class ButtLP(ButtBP):
    __swig_setmethods__ = {}
    for _s in [ButtBP]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ButtLP, name, value)
    __swig_getmethods__ = {}
    for _s in [ButtBP]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ButtLP, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_ButtLP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_ButtLP
    __del__ = lambda self : None;
ButtLP_swigregister = _sndobj.ButtLP_swigregister
ButtLP_swigregister(ButtLP)

class Ap(TpTz):
    __swig_setmethods__ = {}
    for _s in [TpTz]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ap, name, value)
    __swig_getmethods__ = {}
    for _s in [TpTz]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Ap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Ap
    __del__ = lambda self : None;
    def SetFreq(self, *args): return _sndobj.Ap_SetFreq(self, *args)
    def SetR(self, *args): return _sndobj.Ap_SetR(self, *args)
    def SetSr(self, *args): return _sndobj.Ap_SetSr(self, *args)
    def Set(self, *args): return _sndobj.Ap_Set(self, *args)
    def Connect(self, *args): return _sndobj.Ap_Connect(self, *args)
    def DoProcess(self): return _sndobj.Ap_DoProcess(self)
    def ErrorMessage(self): return _sndobj.Ap_ErrorMessage(self)
Ap_swigregister = _sndobj.Ap_swigregister
Ap_swigregister(Ap)

class LoPass(Filter):
    __swig_setmethods__ = {}
    for _s in [Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoPass, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LoPass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_LoPass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_LoPass
    __del__ = lambda self : None;
    def SetFreq(self, *args): return _sndobj.LoPass_SetFreq(self, *args)
    def SetSr(self, *args): return _sndobj.LoPass_SetSr(self, *args)
    def Set(self, *args): return _sndobj.LoPass_Set(self, *args)
    def DoProcess(self): return _sndobj.LoPass_DoProcess(self)
LoPass_swigregister = _sndobj.LoPass_swigregister
LoPass_swigregister(LoPass)

class HiPass(LoPass):
    __swig_setmethods__ = {}
    for _s in [LoPass]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HiPass, name, value)
    __swig_getmethods__ = {}
    for _s in [LoPass]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HiPass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_HiPass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_HiPass
    __del__ = lambda self : None;
    def SetFreq(self, *args): return _sndobj.HiPass_SetFreq(self, *args)
    def SetSr(self, *args): return _sndobj.HiPass_SetSr(self, *args)
    def Set(self, *args): return _sndobj.HiPass_Set(self, *args)
HiPass_swigregister = _sndobj.HiPass_swigregister
HiPass_swigregister(HiPass)

class Hilb(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hilb, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Hilb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["real"] = _sndobj.Hilb_real_set
    __swig_getmethods__["real"] = _sndobj.Hilb_real_get
    if _newclass:real = _swig_property(_sndobj.Hilb_real_get, _sndobj.Hilb_real_set)
    __swig_setmethods__["imag"] = _sndobj.Hilb_imag_set
    __swig_getmethods__["imag"] = _sndobj.Hilb_imag_get
    if _newclass:imag = _swig_property(_sndobj.Hilb_imag_get, _sndobj.Hilb_imag_set)
    def __init__(self, *args): 
        this = _sndobj.new_Hilb(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Hilb
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.Hilb_DoProcess(self)
    def ErrorMessage(self): return _sndobj.Hilb_ErrorMessage(self)
Hilb_swigregister = _sndobj.Hilb_swigregister
Hilb_swigregister(Hilb)
c1 = cvar.c1
c2 = cvar.c2
c3 = cvar.c3
poles = cvar.poles

class SyncGrain(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SyncGrain, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SyncGrain, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SyncGrain(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SyncGrain
    __del__ = lambda self : None;
    def Offset(self, *args): return _sndobj.SyncGrain_Offset(self, *args)
    def SetWaveTable(self, *args): return _sndobj.SyncGrain_SetWaveTable(self, *args)
    def SetEnvelopeTable(self, *args): return _sndobj.SyncGrain_SetEnvelopeTable(self, *args)
    def SetFreq(self, *args): return _sndobj.SyncGrain_SetFreq(self, *args)
    def SetAmp(self, *args): return _sndobj.SyncGrain_SetAmp(self, *args)
    def SetPitch(self, *args): return _sndobj.SyncGrain_SetPitch(self, *args)
    def SetGrainSize(self, *args): return _sndobj.SyncGrain_SetGrainSize(self, *args)
    def SetPointerRate(self, *args): return _sndobj.SyncGrain_SetPointerRate(self, *args)
    def Set(self, *args): return _sndobj.SyncGrain_Set(self, *args)
    def Connect(self, *args): return _sndobj.SyncGrain_Connect(self, *args)
    def DoProcess(self): return _sndobj.SyncGrain_DoProcess(self)
    def ErrorMessage(self): return _sndobj.SyncGrain_ErrorMessage(self)
SyncGrain_swigregister = _sndobj.SyncGrain_swigregister
SyncGrain_swigregister(SyncGrain)

class SndObjList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndObjList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SndObjList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["obj"] = _sndobj.SndObjList_obj_set
    __swig_getmethods__["obj"] = _sndobj.SndObjList_obj_get
    if _newclass:obj = _swig_property(_sndobj.SndObjList_obj_get, _sndobj.SndObjList_obj_set)
    __swig_setmethods__["next"] = _sndobj.SndObjList_next_set
    __swig_getmethods__["next"] = _sndobj.SndObjList_next_get
    if _newclass:next = _swig_property(_sndobj.SndObjList_next_get, _sndobj.SndObjList_next_set)
    def __init__(self): 
        this = _sndobj.new_SndObjList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndObjList
    __del__ = lambda self : None;
SndObjList_swigregister = _sndobj.SndObjList_swigregister
SndObjList_swigregister(SndObjList)

class Mixer(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mixer, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Mixer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Mixer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Mixer
    __del__ = lambda self : None;
    def GetObjNo(self): return _sndobj.Mixer_GetObjNo(self)
    def AddObj(self, *args): return _sndobj.Mixer_AddObj(self, *args)
    def DeleteObj(self, *args): return _sndobj.Mixer_DeleteObj(self, *args)
    def DoProcess(self): return _sndobj.Mixer_DoProcess(self)
    def Connect(self, *args): return _sndobj.Mixer_Connect(self, *args)
    def ErrorMessage(self): return _sndobj.Mixer_ErrorMessage(self)
Mixer_swigregister = _sndobj.Mixer_swigregister
Mixer_swigregister(Mixer)

class Pan(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pan, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pan, name)
    __repr__ = _swig_repr
    __swig_setmethods__["left"] = _sndobj.Pan_left_set
    __swig_getmethods__["left"] = _sndobj.Pan_left_get
    if _newclass:left = _swig_property(_sndobj.Pan_left_get, _sndobj.Pan_left_set)
    __swig_setmethods__["right"] = _sndobj.Pan_right_set
    __swig_getmethods__["right"] = _sndobj.Pan_right_get
    if _newclass:right = _swig_property(_sndobj.Pan_right_get, _sndobj.Pan_right_set)
    def __init__(self, *args): 
        this = _sndobj.new_Pan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Pan
    __del__ = lambda self : None;
    def SetPan(self, *args): return _sndobj.Pan_SetPan(self, *args)
    def Set(self, *args): return _sndobj.Pan_Set(self, *args)
    def Connect(self, *args): return _sndobj.Pan_Connect(self, *args)
    def DoProcess(self): return _sndobj.Pan_DoProcess(self)
    def ErrorMessage(self): return _sndobj.Pan_ErrorMessage(self)
Pan_swigregister = _sndobj.Pan_swigregister
Pan_swigregister(Pan)
squrt2o2 = cvar.squrt2o2

class Gain(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gain, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Gain, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Gain(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Gain
    __del__ = lambda self : None;
    def Set(self, *args): return _sndobj.Gain_Set(self, *args)
    def SetGain(self, *args): return _sndobj.Gain_SetGain(self, *args)
    def SetGainM(self, *args): return _sndobj.Gain_SetGainM(self, *args)
    def dBToAmp(self, *args): return _sndobj.Gain_dBToAmp(self, *args)
    def DoProcess(self): return _sndobj.Gain_DoProcess(self)
Gain_swigregister = _sndobj.Gain_swigregister
Gain_swigregister(Gain)

class Interp(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Interp, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Interp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Interp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Interp
    __del__ = lambda self : None;
    def Set(self, *args): return _sndobj.Interp_Set(self, *args)
    def SetSr(self, *args): return _sndobj.Interp_SetSr(self, *args)
    def Restart(self): return _sndobj.Interp_Restart(self)
    def SetCurve(self, *args): return _sndobj.Interp_SetCurve(self, *args)
    def SetDur(self, *args): return _sndobj.Interp_SetDur(self, *args)
    def DoProcess(self): return _sndobj.Interp_DoProcess(self)
Interp_swigregister = _sndobj.Interp_swigregister
Interp_swigregister(Interp)

class Phase(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Phase, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Phase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Phase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Phase
    __del__ = lambda self : None;
    def SetFreq(self, *args): return _sndobj.Phase_SetFreq(self, *args)
    def SetPhase(self, *args): return _sndobj.Phase_SetPhase(self, *args)
    def Set(self, *args): return _sndobj.Phase_Set(self, *args)
    def Connect(self, *args): return _sndobj.Phase_Connect(self, *args)
    def DoProcess(self): return _sndobj.Phase_DoProcess(self)
Phase_swigregister = _sndobj.Phase_swigregister
Phase_swigregister(Phase)

class Ring(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ring, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ring, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Ring(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Ring
    __del__ = lambda self : None;
    def SetInput1(self, *args): return _sndobj.Ring_SetInput1(self, *args)
    def SetInput2(self, *args): return _sndobj.Ring_SetInput2(self, *args)
    def DoProcess(self): return _sndobj.Ring_DoProcess(self)
    def Connect(self, *args): return _sndobj.Ring_Connect(self, *args)
Ring_swigregister = _sndobj.Ring_swigregister
Ring_swigregister(Ring)

UNIT_SAMPLE = _sndobj.UNIT_SAMPLE
UNIT_STEP = _sndobj.UNIT_STEP
RAMP = _sndobj.RAMP
class Unit(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Unit, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Unit, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Unit(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Unit
    __del__ = lambda self : None;
    def SetAmp(self, *args): return _sndobj.Unit_SetAmp(self, *args)
    def SetStep(self, *args): return _sndobj.Unit_SetStep(self, *args)
    def SetMode(self, *args): return _sndobj.Unit_SetMode(self, *args)
    def Set(self, *args): return _sndobj.Unit_Set(self, *args)
    def DoProcess(self): return _sndobj.Unit_DoProcess(self)
Unit_swigregister = _sndobj.Unit_swigregister
Unit_swigregister(Unit)

RAW_VALUE = _sndobj.RAW_VALUE
NORMALISED = _sndobj.NORMALISED
LIMIT = _sndobj.LIMIT
WRAP_AROUND = _sndobj.WRAP_AROUND
class Lookup(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lookup, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Lookup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Lookup(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetMode(self, *args): return _sndobj.Lookup_SetMode(self, *args)
    __swig_destroy__ = _sndobj.delete_Lookup
    __del__ = lambda self : None;
    def Offset(self, *args): return _sndobj.Lookup_Offset(self, *args)
    def SetTable(self, *args): return _sndobj.Lookup_SetTable(self, *args)
    def Set(self, *args): return _sndobj.Lookup_Set(self, *args)
    def Connect(self, *args): return _sndobj.Lookup_Connect(self, *args)
    def DoProcess(self): return _sndobj.Lookup_DoProcess(self)
Lookup_swigregister = _sndobj.Lookup_swigregister
Lookup_swigregister(Lookup)

class Lookupi(Lookup):
    __swig_setmethods__ = {}
    for _s in [Lookup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lookupi, name, value)
    __swig_getmethods__ = {}
    for _s in [Lookup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Lookupi, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Lookupi(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Lookupi
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.Lookupi_DoProcess(self)
Lookupi_swigregister = _sndobj.Lookupi_swigregister
Lookupi_swigregister(Lookupi)

class Rand(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rand, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rand, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Rand(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Rand
    __del__ = lambda self : None;
    def SetAmp(self, *args): return _sndobj.Rand_SetAmp(self, *args)
    def Set(self, *args): return _sndobj.Rand_Set(self, *args)
    def Connect(self, *args): return _sndobj.Rand_Connect(self, *args)
    def DoProcess(self): return _sndobj.Rand_DoProcess(self)
Rand_swigregister = _sndobj.Rand_swigregister
Rand_swigregister(Rand)
MAXR = cvar.MAXR

class Randh(Rand):
    __swig_setmethods__ = {}
    for _s in [Rand]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Randh, name, value)
    __swig_getmethods__ = {}
    for _s in [Rand]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Randh, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Randh(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Randh
    __del__ = lambda self : None;
    def Connect(self, *args): return _sndobj.Randh_Connect(self, *args)
    def SetSr(self, *args): return _sndobj.Randh_SetSr(self, *args)
    def SetFreq(self, *args): return _sndobj.Randh_SetFreq(self, *args)
    def Set(self, *args): return _sndobj.Randh_Set(self, *args)
    def DoProcess(self): return _sndobj.Randh_DoProcess(self)
Randh_swigregister = _sndobj.Randh_swigregister
Randh_swigregister(Randh)

class Randi(Randh):
    __swig_setmethods__ = {}
    for _s in [Randh]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Randi, name, value)
    __swig_getmethods__ = {}
    for _s in [Randh]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Randi, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Randi(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Randi
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.Randi_DoProcess(self)
Randi_swigregister = _sndobj.Randi_swigregister
Randi_swigregister(Randi)

class FFT(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFT, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FFT, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_FFT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_FFT
    __del__ = lambda self : None;
    def GetFFTSize(self): return _sndobj.FFT_GetFFTSize(self)
    def GetHopSize(self): return _sndobj.FFT_GetHopSize(self)
    def SetWindow(self, *args): return _sndobj.FFT_SetWindow(self, *args)
    def Connect(self, *args): return _sndobj.FFT_Connect(self, *args)
    def Set(self, *args): return _sndobj.FFT_Set(self, *args)
    def SetScale(self, *args): return _sndobj.FFT_SetScale(self, *args)
    def SetFFTSize(self, *args): return _sndobj.FFT_SetFFTSize(self, *args)
    def SetHopSize(self, *args): return _sndobj.FFT_SetHopSize(self, *args)
    def DoProcess(self): return _sndobj.FFT_DoProcess(self)
FFT_swigregister = _sndobj.FFT_swigregister
FFT_swigregister(FFT)

class IFFT(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFFT, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFFT, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_IFFT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_IFFT
    __del__ = lambda self : None;
    def GetFFTSize(self): return _sndobj.IFFT_GetFFTSize(self)
    def GetHopSize(self): return _sndobj.IFFT_GetHopSize(self)
    def SetWindow(self, *args): return _sndobj.IFFT_SetWindow(self, *args)
    def Connect(self, *args): return _sndobj.IFFT_Connect(self, *args)
    def Set(self, *args): return _sndobj.IFFT_Set(self, *args)
    def SetFFTSize(self, *args): return _sndobj.IFFT_SetFFTSize(self, *args)
    def SetHopSize(self, *args): return _sndobj.IFFT_SetHopSize(self, *args)
    def DoProcess(self): return _sndobj.IFFT_DoProcess(self)
IFFT_swigregister = _sndobj.IFFT_swigregister
IFFT_swigregister(IFFT)

class PVA(FFT):
    __swig_setmethods__ = {}
    for _s in [FFT]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVA, name, value)
    __swig_getmethods__ = {}
    for _s in [FFT]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PVA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_PVA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_PVA
    __del__ = lambda self : None;
    def Outphases(self, *args): return _sndobj.PVA_Outphases(self, *args)
    def Set(self, *args): return _sndobj.PVA_Set(self, *args)
    def SetFFTSize(self, *args): return _sndobj.PVA_SetFFTSize(self, *args)
    def SetHopSize(self, *args): return _sndobj.PVA_SetHopSize(self, *args)
    def DoProcess(self): return _sndobj.PVA_DoProcess(self)
PVA_swigregister = _sndobj.PVA_swigregister
PVA_swigregister(PVA)

class PVS(IFFT):
    __swig_setmethods__ = {}
    for _s in [IFFT]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVS, name, value)
    __swig_getmethods__ = {}
    for _s in [IFFT]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PVS, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_PVS(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_PVS
    __del__ = lambda self : None;
    def Set(self, *args): return _sndobj.PVS_Set(self, *args)
    def SetFFTSize(self, *args): return _sndobj.PVS_SetFFTSize(self, *args)
    def SetHopSize(self, *args): return _sndobj.PVS_SetHopSize(self, *args)
    def DoProcess(self): return _sndobj.PVS_DoProcess(self)
PVS_swigregister = _sndobj.PVS_swigregister
PVS_swigregister(PVS)

class PVRead(PVS):
    __swig_setmethods__ = {}
    for _s in [PVS]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVRead, name, value)
    __swig_getmethods__ = {}
    for _s in [PVS]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PVRead, name)
    __repr__ = _swig_repr
    def Outchannel(self, *args): return _sndobj.PVRead_Outchannel(self, *args)
    def Set(self, *args): return _sndobj.PVRead_Set(self, *args)
    def SetInput(self, *args): return _sndobj.PVRead_SetInput(self, *args)
    def SetTimescale(self, *args): return _sndobj.PVRead_SetTimescale(self, *args)
    def __init__(self, *args): 
        this = _sndobj.new_PVRead(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_PVRead
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.PVRead_DoProcess(self)
PVRead_swigregister = _sndobj.PVRead_swigregister
PVRead_swigregister(PVRead)

class IFGram(PVA):
    __swig_setmethods__ = {}
    for _s in [PVA]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFGram, name, value)
    __swig_getmethods__ = {}
    for _s in [PVA]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFGram, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_IFGram(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_IFGram
    __del__ = lambda self : None;
    def Set(self, *args): return _sndobj.IFGram_Set(self, *args)
    def Connect(self, *args): return _sndobj.IFGram_Connect(self, *args)
    def SetFFTSize(self, *args): return _sndobj.IFGram_SetFFTSize(self, *args)
    def DoProcess(self): return _sndobj.IFGram_DoProcess(self)
IFGram_swigregister = _sndobj.IFGram_swigregister
IFGram_swigregister(IFGram)

class SinAnal(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SinAnal, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SinAnal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SinAnal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SinAnal
    __del__ = lambda self : None;
    def GetTrackID(self, *args): return _sndobj.SinAnal_GetTrackID(self, *args)
    def GetTracks(self): return _sndobj.SinAnal_GetTracks(self)
    def Set(self, *args): return _sndobj.SinAnal_Set(self, *args)
    def Connect(self, *args): return _sndobj.SinAnal_Connect(self, *args)
    def SetThreshold(self, *args): return _sndobj.SinAnal_SetThreshold(self, *args)
    def SetIFGram(self, *args): return _sndobj.SinAnal_SetIFGram(self, *args)
    def SetMaxTracks(self, *args): return _sndobj.SinAnal_SetMaxTracks(self, *args)
    def DoProcess(self): return _sndobj.SinAnal_DoProcess(self)
SinAnal_swigregister = _sndobj.SinAnal_swigregister
SinAnal_swigregister(SinAnal)

class SinSyn(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SinSyn, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SinSyn, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SinSyn(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SinSyn
    __del__ = lambda self : None;
    def SetTable(self, *args): return _sndobj.SinSyn_SetTable(self, *args)
    def SetMaxTracks(self, *args): return _sndobj.SinSyn_SetMaxTracks(self, *args)
    def SetScale(self, *args): return _sndobj.SinSyn_SetScale(self, *args)
    def Set(self, *args): return _sndobj.SinSyn_Set(self, *args)
    def Connect(self, *args): return _sndobj.SinSyn_Connect(self, *args)
    def DoProcess(self): return _sndobj.SinSyn_DoProcess(self)
SinSyn_swigregister = _sndobj.SinSyn_swigregister
SinSyn_swigregister(SinSyn)

class ReSyn(SinSyn):
    __swig_setmethods__ = {}
    for _s in [SinSyn]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReSyn, name, value)
    __swig_getmethods__ = {}
    for _s in [SinSyn]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReSyn, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_ReSyn(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetPitch(self, *args): return _sndobj.ReSyn_SetPitch(self, *args)
    def SetTimeScale(self, *args): return _sndobj.ReSyn_SetTimeScale(self, *args)
    def Set(self, *args): return _sndobj.ReSyn_Set(self, *args)
    __swig_destroy__ = _sndobj.delete_ReSyn
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.ReSyn_DoProcess(self)
ReSyn_swigregister = _sndobj.ReSyn_swigregister
ReSyn_swigregister(ReSyn)

class AdSyn(ReSyn):
    __swig_setmethods__ = {}
    for _s in [ReSyn]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdSyn, name, value)
    __swig_getmethods__ = {}
    for _s in [ReSyn]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdSyn, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_AdSyn(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_AdSyn
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.AdSyn_DoProcess(self)
AdSyn_swigregister = _sndobj.AdSyn_swigregister
AdSyn_swigregister(AdSyn)

class IFAdd(ReSyn):
    __swig_setmethods__ = {}
    for _s in [ReSyn]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFAdd, name, value)
    __swig_getmethods__ = {}
    for _s in [ReSyn]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFAdd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_IFAdd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_IFAdd
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.IFAdd_DoProcess(self)
IFAdd_swigregister = _sndobj.IFAdd_swigregister
IFAdd_swigregister(IFAdd)

class SpecMult(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecMult, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpecMult, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SpecMult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SpecMult
    __del__ = lambda self : None;
    def Connect(self, *args): return _sndobj.SpecMult_Connect(self, *args)
    def SetInput2(self, *args): return _sndobj.SpecMult_SetInput2(self, *args)
    def SetTable(self, *args): return _sndobj.SpecMult_SetTable(self, *args)
    def DoProcess(self): return _sndobj.SpecMult_DoProcess(self)
SpecMult_swigregister = _sndobj.SpecMult_swigregister
SpecMult_swigregister(SpecMult)

class SpecInterp(SpecMult):
    __swig_setmethods__ = {}
    for _s in [SpecMult]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecInterp, name, value)
    __swig_getmethods__ = {}
    for _s in [SpecMult]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpecInterp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SpecInterp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SpecInterp
    __del__ = lambda self : None;
    def Connect(self, *args): return _sndobj.SpecInterp_Connect(self, *args)
    def Set(self, *args): return _sndobj.SpecInterp_Set(self, *args)
    def SetInterp(self, *args): return _sndobj.SpecInterp_SetInterp(self, *args)
    def DoProcess(self): return _sndobj.SpecInterp_DoProcess(self)
SpecInterp_swigregister = _sndobj.SpecInterp_swigregister
SpecInterp_swigregister(SpecInterp)

class PVMask(SpecInterp):
    __swig_setmethods__ = {}
    for _s in [SpecInterp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVMask, name, value)
    __swig_getmethods__ = {}
    for _s in [SpecInterp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PVMask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_PVMask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_PVMask
    __del__ = lambda self : None;
    def Connect(self, *args): return _sndobj.PVMask_Connect(self, *args)
    def Set(self, *args): return _sndobj.PVMask_Set(self, *args)
    def SetMaskInput(self, *args): return _sndobj.PVMask_SetMaskInput(self, *args)
    def SetMaskTable(self, *args): return _sndobj.PVMask_SetMaskTable(self, *args)
    def SetMaskGain(self, *args): return _sndobj.PVMask_SetMaskGain(self, *args)
    def DoProcess(self): return _sndobj.PVMask_DoProcess(self)
PVMask_swigregister = _sndobj.PVMask_swigregister
PVMask_swigregister(PVMask)

NORMAL_TRANSP = _sndobj.NORMAL_TRANSP
KEEP_FORMANT = _sndobj.KEEP_FORMANT
class PVTransp(SpecMult):
    __swig_setmethods__ = {}
    for _s in [SpecMult]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVTransp, name, value)
    __swig_getmethods__ = {}
    for _s in [SpecMult]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PVTransp, name)
    __repr__ = _swig_repr
    def Set(self, *args): return _sndobj.PVTransp_Set(self, *args)
    def Connect(self, *args): return _sndobj.PVTransp_Connect(self, *args)
    def SetPitch(self, *args): return _sndobj.PVTransp_SetPitch(self, *args)
    def SetMode(self, *args): return _sndobj.PVTransp_SetMode(self, *args)
    def __init__(self, *args): 
        this = _sndobj.new_PVTransp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_PVTransp
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.PVTransp_DoProcess(self)
PVTransp_swigregister = _sndobj.PVTransp_swigregister
PVTransp_swigregister(PVTransp)

class PVMix(SpecMult):
    __swig_setmethods__ = {}
    for _s in [SpecMult]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVMix, name, value)
    __swig_getmethods__ = {}
    for _s in [SpecMult]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PVMix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_PVMix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_PVMix
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.PVMix_DoProcess(self)
PVMix_swigregister = _sndobj.PVMix_swigregister
PVMix_swigregister(PVMix)

class PVBlur(SpecMult):
    __swig_setmethods__ = {}
    for _s in [SpecMult]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVBlur, name, value)
    __swig_getmethods__ = {}
    for _s in [SpecMult]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PVBlur, name)
    __repr__ = _swig_repr
    def Set(self, *args): return _sndobj.PVBlur_Set(self, *args)
    def SetBlurTime(self, *args): return _sndobj.PVBlur_SetBlurTime(self, *args)
    def SetHopsize(self, *args): return _sndobj.PVBlur_SetHopsize(self, *args)
    def __init__(self, *args): 
        this = _sndobj.new_PVBlur(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_PVBlur
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.PVBlur_DoProcess(self)
PVBlur_swigregister = _sndobj.PVBlur_swigregister
PVBlur_swigregister(PVBlur)

class PVFilter(SpecInterp):
    __swig_setmethods__ = {}
    for _s in [SpecInterp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [SpecInterp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PVFilter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_PVFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_PVFilter
    __del__ = lambda self : None;
    def Connect(self, *args): return _sndobj.PVFilter_Connect(self, *args)
    def Set(self, *args): return _sndobj.PVFilter_Set(self, *args)
    def SetFilterInput(self, *args): return _sndobj.PVFilter_SetFilterInput(self, *args)
    def SetFilterTable(self, *args): return _sndobj.PVFilter_SetFilterTable(self, *args)
    def SetAmount(self, *args): return _sndobj.PVFilter_SetAmount(self, *args)
    def DoProcess(self): return _sndobj.PVFilter_DoProcess(self)
PVFilter_swigregister = _sndobj.PVFilter_swigregister
PVFilter_swigregister(PVFilter)

class PVMorph(SpecInterp):
    __swig_setmethods__ = {}
    for _s in [SpecInterp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVMorph, name, value)
    __swig_getmethods__ = {}
    for _s in [SpecInterp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PVMorph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_PVMorph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_PVMorph
    __del__ = lambda self : None;
    def Connect(self, *args): return _sndobj.PVMorph_Connect(self, *args)
    def Set(self, *args): return _sndobj.PVMorph_Set(self, *args)
    def SetFreqMorph(self, *args): return _sndobj.PVMorph_SetFreqMorph(self, *args)
    def SetAmpMorph(self, *args): return _sndobj.PVMorph_SetAmpMorph(self, *args)
    def DoProcess(self): return _sndobj.PVMorph_DoProcess(self)
PVMorph_swigregister = _sndobj.PVMorph_swigregister
PVMorph_swigregister(PVMorph)

class SpecPolar(SpecMult):
    __swig_setmethods__ = {}
    for _s in [SpecMult]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecPolar, name, value)
    __swig_getmethods__ = {}
    for _s in [SpecMult]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpecPolar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SpecPolar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SpecPolar
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.SpecPolar_DoProcess(self)
SpecPolar_swigregister = _sndobj.SpecPolar_swigregister
SpecPolar_swigregister(SpecPolar)

class SpecSplit(SpecPolar):
    __swig_setmethods__ = {}
    for _s in [SpecPolar]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecSplit, name, value)
    __swig_getmethods__ = {}
    for _s in [SpecPolar]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpecSplit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["magnitude"] = _sndobj.SpecSplit_magnitude_set
    __swig_getmethods__["magnitude"] = _sndobj.SpecSplit_magnitude_get
    if _newclass:magnitude = _swig_property(_sndobj.SpecSplit_magnitude_get, _sndobj.SpecSplit_magnitude_set)
    __swig_setmethods__["phase"] = _sndobj.SpecSplit_phase_set
    __swig_getmethods__["phase"] = _sndobj.SpecSplit_phase_get
    if _newclass:phase = _swig_property(_sndobj.SpecSplit_phase_get, _sndobj.SpecSplit_phase_set)
    def __init__(self, *args): 
        this = _sndobj.new_SpecSplit(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SpecSplit
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.SpecSplit_DoProcess(self)
SpecSplit_swigregister = _sndobj.SpecSplit_swigregister
SpecSplit_swigregister(SpecSplit)

class SpecThresh(SpecPolar):
    __swig_setmethods__ = {}
    for _s in [SpecPolar]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecThresh, name, value)
    __swig_getmethods__ = {}
    for _s in [SpecPolar]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpecThresh, name)
    __repr__ = _swig_repr
    def SetThreshold(self, *args): return _sndobj.SpecThresh_SetThreshold(self, *args)
    def Set(self, *args): return _sndobj.SpecThresh_Set(self, *args)
    def __init__(self, *args): 
        this = _sndobj.new_SpecThresh(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SpecThresh
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.SpecThresh_DoProcess(self)
SpecThresh_swigregister = _sndobj.SpecThresh_swigregister
SpecThresh_swigregister(SpecThresh)

class SpecVoc(SpecPolar):
    __swig_setmethods__ = {}
    for _s in [SpecPolar]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecVoc, name, value)
    __swig_getmethods__ = {}
    for _s in [SpecPolar]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpecVoc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SpecVoc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SpecVoc
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.SpecVoc_DoProcess(self)
SpecVoc_swigregister = _sndobj.SpecVoc_swigregister
SpecVoc_swigregister(SpecVoc)

class SpecCart(SpecMult):
    __swig_setmethods__ = {}
    for _s in [SpecMult]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecCart, name, value)
    __swig_getmethods__ = {}
    for _s in [SpecMult]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpecCart, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SpecCart(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SpecCart
    __del__ = lambda self : None;
    def DoProcess(self): return _sndobj.SpecCart_DoProcess(self)
SpecCart_swigregister = _sndobj.SpecCart_swigregister
SpecCart_swigregister(SpecCart)

class SpecCombine(SpecCart):
    __swig_setmethods__ = {}
    for _s in [SpecCart]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecCombine, name, value)
    __swig_getmethods__ = {}
    for _s in [SpecCart]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpecCombine, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SpecCombine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SpecCombine
    __del__ = lambda self : None;
    def SetPhaseInput(self, *args): return _sndobj.SpecCombine_SetPhaseInput(self, *args)
    def SetMagInput(self, *args): return _sndobj.SpecCombine_SetMagInput(self, *args)
    def Connect(self, *args): return _sndobj.SpecCombine_Connect(self, *args)
    def DoProcess(self): return _sndobj.SpecCombine_DoProcess(self)
SpecCombine_swigregister = _sndobj.SpecCombine_swigregister
SpecCombine_swigregister(SpecCombine)

class SpecIn(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecIn, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpecIn, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SpecIn(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SpecIn
    __del__ = lambda self : None;
    def SetInput(self, *args): return _sndobj.SpecIn_SetInput(self, *args)
    def Connect(self, *args): return _sndobj.SpecIn_Connect(self, *args)
    def Set(self, *args): return _sndobj.SpecIn_Set(self, *args)
    def DoProcess(self): return _sndobj.SpecIn_DoProcess(self)
    def ErrorMessage(self): return _sndobj.SpecIn_ErrorMessage(self)
SpecIn_swigregister = _sndobj.SpecIn_swigregister
SpecIn_swigregister(SpecIn)

class Convol(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Convol, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Convol, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_Convol(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Convol
    __del__ = lambda self : None;
    def Connect(self, *args): return _sndobj.Convol_Connect(self, *args)
    def Set(self, *args): return _sndobj.Convol_Set(self, *args)
    def SetImpulse(self, *args): return _sndobj.Convol_SetImpulse(self, *args)
    def DoProcess(self): return _sndobj.Convol_DoProcess(self)
Convol_swigregister = _sndobj.Convol_swigregister
Convol_swigregister(Convol)

NPREV = _sndobj.NPREV
class Peak(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Peak, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Peak, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pfreq"] = _sndobj.Peak_pfreq_set
    __swig_getmethods__["pfreq"] = _sndobj.Peak_pfreq_get
    if _newclass:pfreq = _swig_property(_sndobj.Peak_pfreq_get, _sndobj.Peak_pfreq_set)
    __swig_setmethods__["pwidth"] = _sndobj.Peak_pwidth_set
    __swig_getmethods__["pwidth"] = _sndobj.Peak_pwidth_get
    if _newclass:pwidth = _swig_property(_sndobj.Peak_pwidth_get, _sndobj.Peak_pwidth_set)
    __swig_setmethods__["ppow"] = _sndobj.Peak_ppow_set
    __swig_getmethods__["ppow"] = _sndobj.Peak_ppow_get
    if _newclass:ppow = _swig_property(_sndobj.Peak_ppow_get, _sndobj.Peak_ppow_set)
    __swig_setmethods__["ploudness"] = _sndobj.Peak_ploudness_set
    __swig_getmethods__["ploudness"] = _sndobj.Peak_ploudness_get
    if _newclass:ploudness = _swig_property(_sndobj.Peak_ploudness_get, _sndobj.Peak_ploudness_set)
    def __init__(self): 
        this = _sndobj.new_Peak()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Peak
    __del__ = lambda self : None;
Peak_swigregister = _sndobj.Peak_swigregister
Peak_swigregister(Peak)

class Histopeak(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histopeak, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Histopeak, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hpitch"] = _sndobj.Histopeak_hpitch_set
    __swig_getmethods__["hpitch"] = _sndobj.Histopeak_hpitch_get
    if _newclass:hpitch = _swig_property(_sndobj.Histopeak_hpitch_get, _sndobj.Histopeak_hpitch_set)
    __swig_setmethods__["hvalue"] = _sndobj.Histopeak_hvalue_set
    __swig_getmethods__["hvalue"] = _sndobj.Histopeak_hvalue_get
    if _newclass:hvalue = _swig_property(_sndobj.Histopeak_hvalue_get, _sndobj.Histopeak_hvalue_set)
    __swig_setmethods__["hloud"] = _sndobj.Histopeak_hloud_set
    __swig_getmethods__["hloud"] = _sndobj.Histopeak_hloud_get
    if _newclass:hloud = _swig_property(_sndobj.Histopeak_hloud_get, _sndobj.Histopeak_hloud_set)
    __swig_setmethods__["hindex"] = _sndobj.Histopeak_hindex_set
    __swig_getmethods__["hindex"] = _sndobj.Histopeak_hindex_get
    if _newclass:hindex = _swig_property(_sndobj.Histopeak_hindex_get, _sndobj.Histopeak_hindex_set)
    __swig_setmethods__["hused"] = _sndobj.Histopeak_hused_set
    __swig_getmethods__["hused"] = _sndobj.Histopeak_hused_get
    if _newclass:hused = _swig_property(_sndobj.Histopeak_hused_get, _sndobj.Histopeak_hused_set)
    def __init__(self): 
        this = _sndobj.new_Histopeak()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Histopeak
    __del__ = lambda self : None;
Histopeak_swigregister = _sndobj.Histopeak_swigregister
Histopeak_swigregister(Histopeak)

class Ptrack(SndObj):
    __swig_setmethods__ = {}
    for _s in [SndObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ptrack, name, value)
    __swig_getmethods__ = {}
    for _s in [SndObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ptrack, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pitch"] = _sndobj.Ptrack_pitch_set
    __swig_getmethods__["pitch"] = _sndobj.Ptrack_pitch_get
    if _newclass:pitch = _swig_property(_sndobj.Ptrack_pitch_get, _sndobj.Ptrack_pitch_set)
    __swig_setmethods__["amp"] = _sndobj.Ptrack_amp_set
    __swig_getmethods__["amp"] = _sndobj.Ptrack_amp_get
    if _newclass:amp = _swig_property(_sndobj.Ptrack_amp_get, _sndobj.Ptrack_amp_set)
    def __init__(self, *args): 
        this = _sndobj.new_Ptrack(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Ptrack
    __del__ = lambda self : None;
    def SetHopsize(self, *args): return _sndobj.Ptrack_SetHopsize(self, *args)
    def SetPeaks(self, *args): return _sndobj.Ptrack_SetPeaks(self, *args)
    def SetScale(self, *args): return _sndobj.Ptrack_SetScale(self, *args)
    def DoProcess(self): return _sndobj.Ptrack_DoProcess(self)
Ptrack_swigregister = _sndobj.Ptrack_swigregister
Ptrack_swigregister(Ptrack)

OVERWRITE = _sndobj.OVERWRITE
APPEND = _sndobj.APPEND
INSERT = _sndobj.INSERT
READ = _sndobj.READ
WAITOPEN = _sndobj.WAITOPEN
SFOPEN = _sndobj.SFOPEN
SFERROR = _sndobj.SFERROR
class SndFIO(SndIO):
    __swig_setmethods__ = {}
    for _s in [SndIO]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndFIO, name, value)
    __swig_getmethods__ = {}
    for _s in [SndIO]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SndFIO, name)
    __repr__ = _swig_repr
    def GetFile(self): return _sndobj.SndFIO_GetFile(self)
    def GetMode(self): return _sndobj.SndFIO_GetMode(self)
    def SetPos(self, *args): return _sndobj.SndFIO_SetPos(self, *args)
    def Eof(self): return _sndobj.SndFIO_Eof(self)
    def GetDataFrames(self): return _sndobj.SndFIO_GetDataFrames(self)
    def GetPos(self): return _sndobj.SndFIO_GetPos(self)
    def GetStatus(self): return _sndobj.SndFIO_GetStatus(self)
    def __init__(self, *args): 
        this = _sndobj.new_SndFIO(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndFIO
    __del__ = lambda self : None;
    def Read(self): return _sndobj.SndFIO_Read(self)
    def Write(self): return _sndobj.SndFIO_Write(self)
    def ErrorMessage(self): return _sndobj.SndFIO_ErrorMessage(self)
SndFIO_swigregister = _sndobj.SndFIO_swigregister
SndFIO_swigregister(SndFIO)

class wave_head(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wave_head, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wave_head, name)
    __repr__ = _swig_repr
    __swig_setmethods__["magic"] = _sndobj.wave_head_magic_set
    __swig_getmethods__["magic"] = _sndobj.wave_head_magic_get
    if _newclass:magic = _swig_property(_sndobj.wave_head_magic_get, _sndobj.wave_head_magic_set)
    __swig_setmethods__["len0"] = _sndobj.wave_head_len0_set
    __swig_getmethods__["len0"] = _sndobj.wave_head_len0_get
    if _newclass:len0 = _swig_property(_sndobj.wave_head_len0_get, _sndobj.wave_head_len0_set)
    __swig_setmethods__["magic1"] = _sndobj.wave_head_magic1_set
    __swig_getmethods__["magic1"] = _sndobj.wave_head_magic1_get
    if _newclass:magic1 = _swig_property(_sndobj.wave_head_magic1_get, _sndobj.wave_head_magic1_set)
    __swig_setmethods__["magic2"] = _sndobj.wave_head_magic2_set
    __swig_getmethods__["magic2"] = _sndobj.wave_head_magic2_get
    if _newclass:magic2 = _swig_property(_sndobj.wave_head_magic2_get, _sndobj.wave_head_magic2_set)
    __swig_setmethods__["len"] = _sndobj.wave_head_len_set
    __swig_getmethods__["len"] = _sndobj.wave_head_len_get
    if _newclass:len = _swig_property(_sndobj.wave_head_len_get, _sndobj.wave_head_len_set)
    __swig_setmethods__["format"] = _sndobj.wave_head_format_set
    __swig_getmethods__["format"] = _sndobj.wave_head_format_get
    if _newclass:format = _swig_property(_sndobj.wave_head_format_get, _sndobj.wave_head_format_set)
    __swig_setmethods__["nchns"] = _sndobj.wave_head_nchns_set
    __swig_getmethods__["nchns"] = _sndobj.wave_head_nchns_get
    if _newclass:nchns = _swig_property(_sndobj.wave_head_nchns_get, _sndobj.wave_head_nchns_set)
    __swig_setmethods__["rate"] = _sndobj.wave_head_rate_set
    __swig_getmethods__["rate"] = _sndobj.wave_head_rate_get
    if _newclass:rate = _swig_property(_sndobj.wave_head_rate_get, _sndobj.wave_head_rate_set)
    __swig_setmethods__["aver"] = _sndobj.wave_head_aver_set
    __swig_getmethods__["aver"] = _sndobj.wave_head_aver_get
    if _newclass:aver = _swig_property(_sndobj.wave_head_aver_get, _sndobj.wave_head_aver_set)
    __swig_setmethods__["nBlockAlign"] = _sndobj.wave_head_nBlockAlign_set
    __swig_getmethods__["nBlockAlign"] = _sndobj.wave_head_nBlockAlign_get
    if _newclass:nBlockAlign = _swig_property(_sndobj.wave_head_nBlockAlign_get, _sndobj.wave_head_nBlockAlign_set)
    __swig_setmethods__["size"] = _sndobj.wave_head_size_set
    __swig_getmethods__["size"] = _sndobj.wave_head_size_get
    if _newclass:size = _swig_property(_sndobj.wave_head_size_get, _sndobj.wave_head_size_set)
    def __init__(self): 
        this = _sndobj.new_wave_head()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_wave_head
    __del__ = lambda self : None;
wave_head_swigregister = _sndobj.wave_head_swigregister
wave_head_swigregister(wave_head)
RIFF_ID = cvar.RIFF_ID
WAVE_ID = cvar.WAVE_ID
FMT_ID = cvar.FMT_ID
DATA_ID = cvar.DATA_ID

class wave_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wave_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wave_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["magic3"] = _sndobj.wave_data_magic3_set
    __swig_getmethods__["magic3"] = _sndobj.wave_data_magic3_get
    if _newclass:magic3 = _swig_property(_sndobj.wave_data_magic3_get, _sndobj.wave_data_magic3_set)
    __swig_setmethods__["datasize"] = _sndobj.wave_data_datasize_set
    __swig_getmethods__["datasize"] = _sndobj.wave_data_datasize_get
    if _newclass:datasize = _swig_property(_sndobj.wave_data_datasize_get, _sndobj.wave_data_datasize_set)
    def __init__(self): 
        this = _sndobj.new_wave_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_wave_data
    __del__ = lambda self : None;
wave_data_swigregister = _sndobj.wave_data_swigregister
wave_data_swigregister(wave_data)

class SndWave(SndFIO):
    __swig_setmethods__ = {}
    for _s in [SndFIO]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndWave, name, value)
    __swig_getmethods__ = {}
    for _s in [SndFIO]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SndWave, name)
    __repr__ = _swig_repr
    def GetHeader(self): return _sndobj.SndWave_GetHeader(self)
    def __init__(self, *args): 
        this = _sndobj.new_SndWave(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndWave
    __del__ = lambda self : None;
    def Read(self): return _sndobj.SndWave_Read(self)
    def Write(self): return _sndobj.SndWave_Write(self)
    def IsWave(self): return _sndobj.SndWave_IsWave(self)
    def ErrorMessage(self): return _sndobj.SndWave_ErrorMessage(self)
SndWave_swigregister = _sndobj.SndWave_swigregister
SndWave_swigregister(SndWave)

WAVE_FORMAT_EXTENSIBLE = _sndobj.WAVE_FORMAT_EXTENSIBLE
WAVE_FORMAT_IEEE_FLOAT = _sndobj.WAVE_FORMAT_IEEE_FLOAT
SPEAKER_FRONT_LEFT = _sndobj.SPEAKER_FRONT_LEFT
SPEAKER_FRONT_RIGHT = _sndobj.SPEAKER_FRONT_RIGHT
SPEAKER_FRONT_CENTER = _sndobj.SPEAKER_FRONT_CENTER
SPEAKER_LOW_FREQUENCY = _sndobj.SPEAKER_LOW_FREQUENCY
SPEAKER_BACK_LEFT = _sndobj.SPEAKER_BACK_LEFT
SPEAKER_BACK_RIGHT = _sndobj.SPEAKER_BACK_RIGHT
SPEAKER_FRONT_LEFT_OF_CENTER = _sndobj.SPEAKER_FRONT_LEFT_OF_CENTER
SPEAKER_FRONT_RIGHT_OF_CENTER = _sndobj.SPEAKER_FRONT_RIGHT_OF_CENTER
SPEAKER_BACK_CENTER = _sndobj.SPEAKER_BACK_CENTER
SPEAKER_SIDE_LEFT = _sndobj.SPEAKER_SIDE_LEFT
SPEAKER_SIDE_RIGHT = _sndobj.SPEAKER_SIDE_RIGHT
SPEAKER_TOP_CENTER = _sndobj.SPEAKER_TOP_CENTER
SPEAKER_TOP_FRONT_LEFT = _sndobj.SPEAKER_TOP_FRONT_LEFT
SPEAKER_TOP_FRONT_CENTER = _sndobj.SPEAKER_TOP_FRONT_CENTER
SPEAKER_TOP_FRONT_RIGHT = _sndobj.SPEAKER_TOP_FRONT_RIGHT
SPEAKER_TOP_BACK_LEFT = _sndobj.SPEAKER_TOP_BACK_LEFT
SPEAKER_TOP_BACK_CENTER = _sndobj.SPEAKER_TOP_BACK_CENTER
SPEAKER_TOP_BACK_RIGHT = _sndobj.SPEAKER_TOP_BACK_RIGHT
SPEAKER_RESERVED = _sndobj.SPEAKER_RESERVED
class wav_ex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wav_ex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wav_ex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wValidBitsPerSample"] = _sndobj.wav_ex_wValidBitsPerSample_set
    __swig_getmethods__["wValidBitsPerSample"] = _sndobj.wav_ex_wValidBitsPerSample_get
    if _newclass:wValidBitsPerSample = _swig_property(_sndobj.wav_ex_wValidBitsPerSample_get, _sndobj.wav_ex_wValidBitsPerSample_set)
    __swig_setmethods__["dwChannelMask"] = _sndobj.wav_ex_dwChannelMask_set
    __swig_getmethods__["dwChannelMask"] = _sndobj.wav_ex_dwChannelMask_get
    if _newclass:dwChannelMask = _swig_property(_sndobj.wav_ex_dwChannelMask_get, _sndobj.wav_ex_dwChannelMask_set)
    __swig_setmethods__["SubFormat"] = _sndobj.wav_ex_SubFormat_set
    __swig_getmethods__["SubFormat"] = _sndobj.wav_ex_SubFormat_get
    if _newclass:SubFormat = _swig_property(_sndobj.wav_ex_SubFormat_get, _sndobj.wav_ex_SubFormat_set)
    def __init__(self): 
        this = _sndobj.new_wav_ex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_wav_ex
    __del__ = lambda self : None;
wav_ex_swigregister = _sndobj.wav_ex_swigregister
wav_ex_swigregister(wav_ex)

class WAVEFORMATEXTENSIBLE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WAVEFORMATEXTENSIBLE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WAVEFORMATEXTENSIBLE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["waveformatex"] = _sndobj.WAVEFORMATEXTENSIBLE_waveformatex_set
    __swig_getmethods__["waveformatex"] = _sndobj.WAVEFORMATEXTENSIBLE_waveformatex_get
    if _newclass:waveformatex = _swig_property(_sndobj.WAVEFORMATEXTENSIBLE_waveformatex_get, _sndobj.WAVEFORMATEXTENSIBLE_waveformatex_set)
    __swig_setmethods__["waveformat_ext"] = _sndobj.WAVEFORMATEXTENSIBLE_waveformat_ext_set
    __swig_getmethods__["waveformat_ext"] = _sndobj.WAVEFORMATEXTENSIBLE_waveformat_ext_get
    if _newclass:waveformat_ext = _swig_property(_sndobj.WAVEFORMATEXTENSIBLE_waveformat_ext_get, _sndobj.WAVEFORMATEXTENSIBLE_waveformat_ext_set)
    def __init__(self): 
        this = _sndobj.new_WAVEFORMATEXTENSIBLE()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_WAVEFORMATEXTENSIBLE
    __del__ = lambda self : None;
WAVEFORMATEXTENSIBLE_swigregister = _sndobj.WAVEFORMATEXTENSIBLE_swigregister
WAVEFORMATEXTENSIBLE_swigregister(WAVEFORMATEXTENSIBLE)

class SndWaveX(SndWave):
    __swig_setmethods__ = {}
    for _s in [SndWave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndWaveX, name, value)
    __swig_getmethods__ = {}
    for _s in [SndWave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SndWaveX, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SndWaveX(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndWaveX
    __del__ = lambda self : None;
    def GetHeader(self, *args): return _sndobj.SndWaveX_GetHeader(self, *args)
    def GetChannelMask(self): return _sndobj.SndWaveX_GetChannelMask(self)
    def Read(self): return _sndobj.SndWaveX_Read(self)
    def Write(self): return _sndobj.SndWaveX_Write(self)
    def IsWaveExtensible(self): return _sndobj.SndWaveX_IsWaveExtensible(self)
SndWaveX_swigregister = _sndobj.SndWaveX_swigregister
SndWaveX_swigregister(SndWaveX)
PCM = cvar.PCM
IEEE_FLOAT = cvar.IEEE_FLOAT
KSDATAFORMAT_SUBTYPE_PCM = cvar.KSDATAFORMAT_SUBTYPE_PCM
KSDATAFORMAT_SUBTYPE_IEEE_FLOAT = cvar.KSDATAFORMAT_SUBTYPE_IEEE_FLOAT

class pvoc_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pvoc_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pvoc_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wWordFormat"] = _sndobj.pvoc_data_wWordFormat_set
    __swig_getmethods__["wWordFormat"] = _sndobj.pvoc_data_wWordFormat_get
    if _newclass:wWordFormat = _swig_property(_sndobj.pvoc_data_wWordFormat_get, _sndobj.pvoc_data_wWordFormat_set)
    __swig_setmethods__["wAnalFormat"] = _sndobj.pvoc_data_wAnalFormat_set
    __swig_getmethods__["wAnalFormat"] = _sndobj.pvoc_data_wAnalFormat_get
    if _newclass:wAnalFormat = _swig_property(_sndobj.pvoc_data_wAnalFormat_get, _sndobj.pvoc_data_wAnalFormat_set)
    __swig_setmethods__["wSourceFormat"] = _sndobj.pvoc_data_wSourceFormat_set
    __swig_getmethods__["wSourceFormat"] = _sndobj.pvoc_data_wSourceFormat_get
    if _newclass:wSourceFormat = _swig_property(_sndobj.pvoc_data_wSourceFormat_get, _sndobj.pvoc_data_wSourceFormat_set)
    __swig_setmethods__["wWindowType"] = _sndobj.pvoc_data_wWindowType_set
    __swig_getmethods__["wWindowType"] = _sndobj.pvoc_data_wWindowType_get
    if _newclass:wWindowType = _swig_property(_sndobj.pvoc_data_wWindowType_get, _sndobj.pvoc_data_wWindowType_set)
    __swig_setmethods__["nAnalysisBins"] = _sndobj.pvoc_data_nAnalysisBins_set
    __swig_getmethods__["nAnalysisBins"] = _sndobj.pvoc_data_nAnalysisBins_get
    if _newclass:nAnalysisBins = _swig_property(_sndobj.pvoc_data_nAnalysisBins_get, _sndobj.pvoc_data_nAnalysisBins_set)
    __swig_setmethods__["dwWinlen"] = _sndobj.pvoc_data_dwWinlen_set
    __swig_getmethods__["dwWinlen"] = _sndobj.pvoc_data_dwWinlen_get
    if _newclass:dwWinlen = _swig_property(_sndobj.pvoc_data_dwWinlen_get, _sndobj.pvoc_data_dwWinlen_set)
    __swig_setmethods__["dwOverlap"] = _sndobj.pvoc_data_dwOverlap_set
    __swig_getmethods__["dwOverlap"] = _sndobj.pvoc_data_dwOverlap_get
    if _newclass:dwOverlap = _swig_property(_sndobj.pvoc_data_dwOverlap_get, _sndobj.pvoc_data_dwOverlap_set)
    __swig_setmethods__["dwFrameAlign"] = _sndobj.pvoc_data_dwFrameAlign_set
    __swig_getmethods__["dwFrameAlign"] = _sndobj.pvoc_data_dwFrameAlign_get
    if _newclass:dwFrameAlign = _swig_property(_sndobj.pvoc_data_dwFrameAlign_get, _sndobj.pvoc_data_dwFrameAlign_set)
    __swig_setmethods__["fAnalysisRate"] = _sndobj.pvoc_data_fAnalysisRate_set
    __swig_getmethods__["fAnalysisRate"] = _sndobj.pvoc_data_fAnalysisRate_get
    if _newclass:fAnalysisRate = _swig_property(_sndobj.pvoc_data_fAnalysisRate_get, _sndobj.pvoc_data_fAnalysisRate_set)
    __swig_setmethods__["fWindowParam"] = _sndobj.pvoc_data_fWindowParam_set
    __swig_getmethods__["fWindowParam"] = _sndobj.pvoc_data_fWindowParam_get
    if _newclass:fWindowParam = _swig_property(_sndobj.pvoc_data_fWindowParam_get, _sndobj.pvoc_data_fWindowParam_set)
    def __init__(self): 
        this = _sndobj.new_pvoc_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_pvoc_data
    __del__ = lambda self : None;
pvoc_data_swigregister = _sndobj.pvoc_data_swigregister
pvoc_data_swigregister(pvoc_data)

class pvocex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pvocex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pvocex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dwVersion"] = _sndobj.pvocex_dwVersion_set
    __swig_getmethods__["dwVersion"] = _sndobj.pvocex_dwVersion_get
    if _newclass:dwVersion = _swig_property(_sndobj.pvocex_dwVersion_get, _sndobj.pvocex_dwVersion_set)
    __swig_setmethods__["dwDataSize"] = _sndobj.pvocex_dwDataSize_set
    __swig_getmethods__["dwDataSize"] = _sndobj.pvocex_dwDataSize_get
    if _newclass:dwDataSize = _swig_property(_sndobj.pvocex_dwDataSize_get, _sndobj.pvocex_dwDataSize_set)
    __swig_setmethods__["data"] = _sndobj.pvocex_data_set
    __swig_getmethods__["data"] = _sndobj.pvocex_data_get
    if _newclass:data = _swig_property(_sndobj.pvocex_data_get, _sndobj.pvocex_data_set)
    def __init__(self): 
        this = _sndobj.new_pvocex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_pvocex
    __del__ = lambda self : None;
pvocex_swigregister = _sndobj.pvocex_swigregister
pvocex_swigregister(pvocex)

IEEE_FLOAT_T = _sndobj.IEEE_FLOAT_T
IEEE_DOUBLE_T = _sndobj.IEEE_DOUBLE_T
PVOC_AMP_FREQ = _sndobj.PVOC_AMP_FREQ
PVOC_AMP_PHASE = _sndobj.PVOC_AMP_PHASE
PVOC_COMPLEX = _sndobj.PVOC_COMPLEX
DEFAULT = _sndobj.DEFAULT
HAMMING = _sndobj.HAMMING
HANNING = _sndobj.HANNING
KAISER = _sndobj.KAISER
RECTANGULAR = _sndobj.RECTANGULAR
CUSTOM = _sndobj.CUSTOM
class WAVEFORMATPVOCEX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WAVEFORMATPVOCEX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WAVEFORMATPVOCEX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["waveformatex"] = _sndobj.WAVEFORMATPVOCEX_waveformatex_set
    __swig_getmethods__["waveformatex"] = _sndobj.WAVEFORMATPVOCEX_waveformatex_get
    if _newclass:waveformatex = _swig_property(_sndobj.WAVEFORMATPVOCEX_waveformatex_get, _sndobj.WAVEFORMATPVOCEX_waveformatex_set)
    __swig_setmethods__["waveformat_ext"] = _sndobj.WAVEFORMATPVOCEX_waveformat_ext_set
    __swig_getmethods__["waveformat_ext"] = _sndobj.WAVEFORMATPVOCEX_waveformat_ext_get
    if _newclass:waveformat_ext = _swig_property(_sndobj.WAVEFORMATPVOCEX_waveformat_ext_get, _sndobj.WAVEFORMATPVOCEX_waveformat_ext_set)
    __swig_setmethods__["pvocformat_ext"] = _sndobj.WAVEFORMATPVOCEX_pvocformat_ext_set
    __swig_getmethods__["pvocformat_ext"] = _sndobj.WAVEFORMATPVOCEX_pvocformat_ext_get
    if _newclass:pvocformat_ext = _swig_property(_sndobj.WAVEFORMATPVOCEX_pvocformat_ext_get, _sndobj.WAVEFORMATPVOCEX_pvocformat_ext_set)
    def __init__(self): 
        this = _sndobj.new_WAVEFORMATPVOCEX()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_WAVEFORMATPVOCEX
    __del__ = lambda self : None;
WAVEFORMATPVOCEX_swigregister = _sndobj.WAVEFORMATPVOCEX_swigregister
WAVEFORMATPVOCEX_swigregister(WAVEFORMATPVOCEX)

class SndPVOCEX(SndWaveX):
    __swig_setmethods__ = {}
    for _s in [SndWaveX]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndPVOCEX, name, value)
    __swig_getmethods__ = {}
    for _s in [SndWaveX]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SndPVOCEX, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SndPVOCEX(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndPVOCEX
    __del__ = lambda self : None;
    def GetFFTSize(self): return _sndobj.SndPVOCEX_GetFFTSize(self)
    def GetHopSize(self): return _sndobj.SndPVOCEX_GetHopSize(self)
    def GetWindowType(self): return _sndobj.SndPVOCEX_GetWindowType(self)
    def GetWindowLength(self): return _sndobj.SndPVOCEX_GetWindowLength(self)
    def GetHeader(self, *args): return _sndobj.SndPVOCEX_GetHeader(self, *args)
    def SetTimePos(self, *args): return _sndobj.SndPVOCEX_SetTimePos(self, *args)
    def Read(self): return _sndobj.SndPVOCEX_Read(self)
    def Write(self): return _sndobj.SndPVOCEX_Write(self)
    def IsPvocex(self): return _sndobj.SndPVOCEX_IsPvocex(self)
SndPVOCEX_swigregister = _sndobj.SndPVOCEX_swigregister
SndPVOCEX_swigregister(SndPVOCEX)
KSDATAFORMAT_SUBTYPE_PVOC = cvar.KSDATAFORMAT_SUBTYPE_PVOC

class sinus_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sinus_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sinus_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wWordFormat"] = _sndobj.sinus_data_wWordFormat_set
    __swig_getmethods__["wWordFormat"] = _sndobj.sinus_data_wWordFormat_get
    if _newclass:wWordFormat = _swig_property(_sndobj.sinus_data_wWordFormat_get, _sndobj.sinus_data_wWordFormat_set)
    __swig_setmethods__["wHopsize"] = _sndobj.sinus_data_wHopsize_set
    __swig_getmethods__["wHopsize"] = _sndobj.sinus_data_wHopsize_get
    if _newclass:wHopsize = _swig_property(_sndobj.sinus_data_wHopsize_get, _sndobj.sinus_data_wHopsize_set)
    __swig_setmethods__["wWindowType"] = _sndobj.sinus_data_wWindowType_set
    __swig_getmethods__["wWindowType"] = _sndobj.sinus_data_wWindowType_get
    if _newclass:wWindowType = _swig_property(_sndobj.sinus_data_wWindowType_get, _sndobj.sinus_data_wWindowType_set)
    __swig_setmethods__["wMaxtracks"] = _sndobj.sinus_data_wMaxtracks_set
    __swig_getmethods__["wMaxtracks"] = _sndobj.sinus_data_wMaxtracks_get
    if _newclass:wMaxtracks = _swig_property(_sndobj.sinus_data_wMaxtracks_get, _sndobj.sinus_data_wMaxtracks_set)
    __swig_setmethods__["dwWindowSize"] = _sndobj.sinus_data_dwWindowSize_set
    __swig_getmethods__["dwWindowSize"] = _sndobj.sinus_data_dwWindowSize_get
    if _newclass:dwWindowSize = _swig_property(_sndobj.sinus_data_dwWindowSize_get, _sndobj.sinus_data_dwWindowSize_set)
    __swig_setmethods__["fThreshold"] = _sndobj.sinus_data_fThreshold_set
    __swig_getmethods__["fThreshold"] = _sndobj.sinus_data_fThreshold_get
    if _newclass:fThreshold = _swig_property(_sndobj.sinus_data_fThreshold_get, _sndobj.sinus_data_fThreshold_set)
    __swig_setmethods__["fAnalysisRate"] = _sndobj.sinus_data_fAnalysisRate_set
    __swig_getmethods__["fAnalysisRate"] = _sndobj.sinus_data_fAnalysisRate_get
    if _newclass:fAnalysisRate = _swig_property(_sndobj.sinus_data_fAnalysisRate_get, _sndobj.sinus_data_fAnalysisRate_set)
    def __init__(self): 
        this = _sndobj.new_sinus_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_sinus_data
    __del__ = lambda self : None;
sinus_data_swigregister = _sndobj.sinus_data_swigregister
sinus_data_swigregister(sinus_data)

class sinusex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sinusex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sinusex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dwVersion"] = _sndobj.sinusex_dwVersion_set
    __swig_getmethods__["dwVersion"] = _sndobj.sinusex_dwVersion_get
    if _newclass:dwVersion = _swig_property(_sndobj.sinusex_dwVersion_get, _sndobj.sinusex_dwVersion_set)
    __swig_setmethods__["data"] = _sndobj.sinusex_data_set
    __swig_getmethods__["data"] = _sndobj.sinusex_data_get
    if _newclass:data = _swig_property(_sndobj.sinusex_data_get, _sndobj.sinusex_data_set)
    def __init__(self): 
        this = _sndobj.new_sinusex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_sinusex
    __del__ = lambda self : None;
sinusex_swigregister = _sndobj.sinusex_swigregister
sinusex_swigregister(sinusex)

class WAVEFORMATSINUSEX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WAVEFORMATSINUSEX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WAVEFORMATSINUSEX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["waveformatex"] = _sndobj.WAVEFORMATSINUSEX_waveformatex_set
    __swig_getmethods__["waveformatex"] = _sndobj.WAVEFORMATSINUSEX_waveformatex_get
    if _newclass:waveformatex = _swig_property(_sndobj.WAVEFORMATSINUSEX_waveformatex_get, _sndobj.WAVEFORMATSINUSEX_waveformatex_set)
    __swig_setmethods__["waveformat_ext"] = _sndobj.WAVEFORMATSINUSEX_waveformat_ext_set
    __swig_getmethods__["waveformat_ext"] = _sndobj.WAVEFORMATSINUSEX_waveformat_ext_get
    if _newclass:waveformat_ext = _swig_property(_sndobj.WAVEFORMATSINUSEX_waveformat_ext_get, _sndobj.WAVEFORMATSINUSEX_waveformat_ext_set)
    __swig_setmethods__["sinusformat_ext"] = _sndobj.WAVEFORMATSINUSEX_sinusformat_ext_set
    __swig_getmethods__["sinusformat_ext"] = _sndobj.WAVEFORMATSINUSEX_sinusformat_ext_get
    if _newclass:sinusformat_ext = _swig_property(_sndobj.WAVEFORMATSINUSEX_sinusformat_ext_get, _sndobj.WAVEFORMATSINUSEX_sinusformat_ext_set)
    def __init__(self): 
        this = _sndobj.new_WAVEFORMATSINUSEX()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_WAVEFORMATSINUSEX
    __del__ = lambda self : None;
WAVEFORMATSINUSEX_swigregister = _sndobj.WAVEFORMATSINUSEX_swigregister
WAVEFORMATSINUSEX_swigregister(WAVEFORMATSINUSEX)

class SndSinIO(SndWaveX):
    __swig_setmethods__ = {}
    for _s in [SndWaveX]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndSinIO, name, value)
    __swig_getmethods__ = {}
    for _s in [SndWaveX]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SndSinIO, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SndSinIO(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndSinIO
    __del__ = lambda self : None;
    def Write(self): return _sndobj.SndSinIO_Write(self)
    def Read(self): return _sndobj.SndSinIO_Read(self)
    def GetTrackID(self, *args): return _sndobj.SndSinIO_GetTrackID(self, *args)
    def GetTracks(self, *args): return _sndobj.SndSinIO_GetTracks(self, *args)
    def GetFFTSize(self): return _sndobj.SndSinIO_GetFFTSize(self)
    def GetHopSize(self): return _sndobj.SndSinIO_GetHopSize(self)
    def GetWindowType(self): return _sndobj.SndSinIO_GetWindowType(self)
    def GetMaxTracks(self): return _sndobj.SndSinIO_GetMaxTracks(self)
    def GetHeader(self, *args): return _sndobj.SndSinIO_GetHeader(self, *args)
    def SetTimePos(self, *args): return _sndobj.SndSinIO_SetTimePos(self, *args)
SndSinIO_swigregister = _sndobj.SndSinIO_swigregister
SndSinIO_swigregister(SndSinIO)
KSDATAFORMAT_SUBTYPE_SINUS = cvar.KSDATAFORMAT_SUBTYPE_SINUS

class CkHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CkHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CkHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ckID"] = _sndobj.CkHdr_ckID_set
    __swig_getmethods__["ckID"] = _sndobj.CkHdr_ckID_get
    if _newclass:ckID = _swig_property(_sndobj.CkHdr_ckID_get, _sndobj.CkHdr_ckID_set)
    __swig_setmethods__["ckSize"] = _sndobj.CkHdr_ckSize_set
    __swig_getmethods__["ckSize"] = _sndobj.CkHdr_ckSize_get
    if _newclass:ckSize = _swig_property(_sndobj.CkHdr_ckSize_get, _sndobj.CkHdr_ckSize_set)
    def __init__(self): 
        this = _sndobj.new_CkHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_CkHdr
    __del__ = lambda self : None;
CkHdr_swigregister = _sndobj.CkHdr_swigregister
CkHdr_swigregister(CkHdr)
FORM_ID = cvar.FORM_ID
COMM_ID = cvar.COMM_ID
MARK_ID = cvar.MARK_ID
INST_ID = cvar.INST_ID
SSND_ID = cvar.SSND_ID
FORM_TYPE = cvar.FORM_TYPE

class FormHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FormHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ckHdr"] = _sndobj.FormHdr_ckHdr_set
    __swig_getmethods__["ckHdr"] = _sndobj.FormHdr_ckHdr_get
    if _newclass:ckHdr = _swig_property(_sndobj.FormHdr_ckHdr_get, _sndobj.FormHdr_ckHdr_set)
    __swig_setmethods__["formType"] = _sndobj.FormHdr_formType_set
    __swig_getmethods__["formType"] = _sndobj.FormHdr_formType_get
    if _newclass:formType = _swig_property(_sndobj.FormHdr_formType_get, _sndobj.FormHdr_formType_set)
    def __init__(self): 
        this = _sndobj.new_FormHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_FormHdr
    __del__ = lambda self : None;
FormHdr_swigregister = _sndobj.FormHdr_swigregister
FormHdr_swigregister(FormHdr)

class CommChunk1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommChunk1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommChunk1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ckHdr"] = _sndobj.CommChunk1_ckHdr_set
    __swig_getmethods__["ckHdr"] = _sndobj.CommChunk1_ckHdr_get
    if _newclass:ckHdr = _swig_property(_sndobj.CommChunk1_ckHdr_get, _sndobj.CommChunk1_ckHdr_set)
    __swig_setmethods__["numChannels"] = _sndobj.CommChunk1_numChannels_set
    __swig_getmethods__["numChannels"] = _sndobj.CommChunk1_numChannels_get
    if _newclass:numChannels = _swig_property(_sndobj.CommChunk1_numChannels_get, _sndobj.CommChunk1_numChannels_set)
    def __init__(self): 
        this = _sndobj.new_CommChunk1()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_CommChunk1
    __del__ = lambda self : None;
CommChunk1_swigregister = _sndobj.CommChunk1_swigregister
CommChunk1_swigregister(CommChunk1)

class CommChunk2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommChunk2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommChunk2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numSampleFrames"] = _sndobj.CommChunk2_numSampleFrames_set
    __swig_getmethods__["numSampleFrames"] = _sndobj.CommChunk2_numSampleFrames_get
    if _newclass:numSampleFrames = _swig_property(_sndobj.CommChunk2_numSampleFrames_get, _sndobj.CommChunk2_numSampleFrames_set)
    __swig_setmethods__["sampleSize"] = _sndobj.CommChunk2_sampleSize_set
    __swig_getmethods__["sampleSize"] = _sndobj.CommChunk2_sampleSize_get
    if _newclass:sampleSize = _swig_property(_sndobj.CommChunk2_sampleSize_get, _sndobj.CommChunk2_sampleSize_set)
    __swig_setmethods__["sampleRate"] = _sndobj.CommChunk2_sampleRate_set
    __swig_getmethods__["sampleRate"] = _sndobj.CommChunk2_sampleRate_get
    if _newclass:sampleRate = _swig_property(_sndobj.CommChunk2_sampleRate_get, _sndobj.CommChunk2_sampleRate_set)
    def __init__(self): 
        this = _sndobj.new_CommChunk2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_CommChunk2
    __del__ = lambda self : None;
CommChunk2_swigregister = _sndobj.CommChunk2_swigregister
CommChunk2_swigregister(CommChunk2)

class Loop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Loop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Loop, name)
    __repr__ = _swig_repr
    __swig_setmethods__["playMode"] = _sndobj.Loop_playMode_set
    __swig_getmethods__["playMode"] = _sndobj.Loop_playMode_get
    if _newclass:playMode = _swig_property(_sndobj.Loop_playMode_get, _sndobj.Loop_playMode_set)
    __swig_setmethods__["beginLoop"] = _sndobj.Loop_beginLoop_set
    __swig_getmethods__["beginLoop"] = _sndobj.Loop_beginLoop_get
    if _newclass:beginLoop = _swig_property(_sndobj.Loop_beginLoop_get, _sndobj.Loop_beginLoop_set)
    __swig_setmethods__["endLoop"] = _sndobj.Loop_endLoop_set
    __swig_getmethods__["endLoop"] = _sndobj.Loop_endLoop_get
    if _newclass:endLoop = _swig_property(_sndobj.Loop_endLoop_get, _sndobj.Loop_endLoop_set)
    def __init__(self): 
        this = _sndobj.new_Loop()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_Loop
    __del__ = lambda self : None;
Loop_swigregister = _sndobj.Loop_swigregister
Loop_swigregister(Loop)

class InstrChunk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrChunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InstrChunk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ckHdr"] = _sndobj.InstrChunk_ckHdr_set
    __swig_getmethods__["ckHdr"] = _sndobj.InstrChunk_ckHdr_get
    if _newclass:ckHdr = _swig_property(_sndobj.InstrChunk_ckHdr_get, _sndobj.InstrChunk_ckHdr_set)
    __swig_setmethods__["baseNote"] = _sndobj.InstrChunk_baseNote_set
    __swig_getmethods__["baseNote"] = _sndobj.InstrChunk_baseNote_get
    if _newclass:baseNote = _swig_property(_sndobj.InstrChunk_baseNote_get, _sndobj.InstrChunk_baseNote_set)
    __swig_setmethods__["detune"] = _sndobj.InstrChunk_detune_set
    __swig_getmethods__["detune"] = _sndobj.InstrChunk_detune_get
    if _newclass:detune = _swig_property(_sndobj.InstrChunk_detune_get, _sndobj.InstrChunk_detune_set)
    __swig_setmethods__["lowNote"] = _sndobj.InstrChunk_lowNote_set
    __swig_getmethods__["lowNote"] = _sndobj.InstrChunk_lowNote_get
    if _newclass:lowNote = _swig_property(_sndobj.InstrChunk_lowNote_get, _sndobj.InstrChunk_lowNote_set)
    __swig_setmethods__["highNote"] = _sndobj.InstrChunk_highNote_set
    __swig_getmethods__["highNote"] = _sndobj.InstrChunk_highNote_get
    if _newclass:highNote = _swig_property(_sndobj.InstrChunk_highNote_get, _sndobj.InstrChunk_highNote_set)
    __swig_setmethods__["lowVelocity"] = _sndobj.InstrChunk_lowVelocity_set
    __swig_getmethods__["lowVelocity"] = _sndobj.InstrChunk_lowVelocity_get
    if _newclass:lowVelocity = _swig_property(_sndobj.InstrChunk_lowVelocity_get, _sndobj.InstrChunk_lowVelocity_set)
    __swig_setmethods__["highVelocity"] = _sndobj.InstrChunk_highVelocity_set
    __swig_getmethods__["highVelocity"] = _sndobj.InstrChunk_highVelocity_get
    if _newclass:highVelocity = _swig_property(_sndobj.InstrChunk_highVelocity_get, _sndobj.InstrChunk_highVelocity_set)
    __swig_setmethods__["gain"] = _sndobj.InstrChunk_gain_set
    __swig_getmethods__["gain"] = _sndobj.InstrChunk_gain_get
    if _newclass:gain = _swig_property(_sndobj.InstrChunk_gain_get, _sndobj.InstrChunk_gain_set)
    __swig_setmethods__["sustainLoop"] = _sndobj.InstrChunk_sustainLoop_set
    __swig_getmethods__["sustainLoop"] = _sndobj.InstrChunk_sustainLoop_get
    if _newclass:sustainLoop = _swig_property(_sndobj.InstrChunk_sustainLoop_get, _sndobj.InstrChunk_sustainLoop_set)
    __swig_setmethods__["releaseLoop"] = _sndobj.InstrChunk_releaseLoop_set
    __swig_getmethods__["releaseLoop"] = _sndobj.InstrChunk_releaseLoop_get
    if _newclass:releaseLoop = _swig_property(_sndobj.InstrChunk_releaseLoop_get, _sndobj.InstrChunk_releaseLoop_set)
    def __init__(self): 
        this = _sndobj.new_InstrChunk()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_InstrChunk
    __del__ = lambda self : None;
InstrChunk_swigregister = _sndobj.InstrChunk_swigregister
InstrChunk_swigregister(InstrChunk)

class SoundDataHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoundDataHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoundDataHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ckHdr"] = _sndobj.SoundDataHdr_ckHdr_set
    __swig_getmethods__["ckHdr"] = _sndobj.SoundDataHdr_ckHdr_get
    if _newclass:ckHdr = _swig_property(_sndobj.SoundDataHdr_ckHdr_get, _sndobj.SoundDataHdr_ckHdr_set)
    __swig_setmethods__["offset"] = _sndobj.SoundDataHdr_offset_set
    __swig_getmethods__["offset"] = _sndobj.SoundDataHdr_offset_get
    if _newclass:offset = _swig_property(_sndobj.SoundDataHdr_offset_get, _sndobj.SoundDataHdr_offset_set)
    __swig_setmethods__["blockSize"] = _sndobj.SoundDataHdr_blockSize_set
    __swig_getmethods__["blockSize"] = _sndobj.SoundDataHdr_blockSize_get
    if _newclass:blockSize = _swig_property(_sndobj.SoundDataHdr_blockSize_get, _sndobj.SoundDataHdr_blockSize_set)
    def __init__(self): 
        this = _sndobj.new_SoundDataHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SoundDataHdr
    __del__ = lambda self : None;
SoundDataHdr_swigregister = _sndobj.SoundDataHdr_swigregister
SoundDataHdr_swigregister(SoundDataHdr)

class aiff_head(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aiff_head, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aiff_head, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ckID1"] = _sndobj.aiff_head_ckID1_set
    __swig_getmethods__["ckID1"] = _sndobj.aiff_head_ckID1_get
    if _newclass:ckID1 = _swig_property(_sndobj.aiff_head_ckID1_get, _sndobj.aiff_head_ckID1_set)
    __swig_setmethods__["ckSize1"] = _sndobj.aiff_head_ckSize1_set
    __swig_getmethods__["ckSize1"] = _sndobj.aiff_head_ckSize1_get
    if _newclass:ckSize1 = _swig_property(_sndobj.aiff_head_ckSize1_get, _sndobj.aiff_head_ckSize1_set)
    __swig_setmethods__["formType"] = _sndobj.aiff_head_formType_set
    __swig_getmethods__["formType"] = _sndobj.aiff_head_formType_get
    if _newclass:formType = _swig_property(_sndobj.aiff_head_formType_get, _sndobj.aiff_head_formType_set)
    __swig_setmethods__["ckID2"] = _sndobj.aiff_head_ckID2_set
    __swig_getmethods__["ckID2"] = _sndobj.aiff_head_ckID2_get
    if _newclass:ckID2 = _swig_property(_sndobj.aiff_head_ckID2_get, _sndobj.aiff_head_ckID2_set)
    __swig_setmethods__["ckSize2"] = _sndobj.aiff_head_ckSize2_set
    __swig_getmethods__["ckSize2"] = _sndobj.aiff_head_ckSize2_get
    if _newclass:ckSize2 = _swig_property(_sndobj.aiff_head_ckSize2_get, _sndobj.aiff_head_ckSize2_set)
    __swig_setmethods__["nchns"] = _sndobj.aiff_head_nchns_set
    __swig_getmethods__["nchns"] = _sndobj.aiff_head_nchns_get
    if _newclass:nchns = _swig_property(_sndobj.aiff_head_nchns_get, _sndobj.aiff_head_nchns_set)
    __swig_setmethods__["numSampleFrames"] = _sndobj.aiff_head_numSampleFrames_set
    __swig_getmethods__["numSampleFrames"] = _sndobj.aiff_head_numSampleFrames_get
    if _newclass:numSampleFrames = _swig_property(_sndobj.aiff_head_numSampleFrames_get, _sndobj.aiff_head_numSampleFrames_set)
    __swig_setmethods__["size"] = _sndobj.aiff_head_size_set
    __swig_getmethods__["size"] = _sndobj.aiff_head_size_get
    if _newclass:size = _swig_property(_sndobj.aiff_head_size_get, _sndobj.aiff_head_size_set)
    __swig_setmethods__["rate"] = _sndobj.aiff_head_rate_set
    __swig_getmethods__["rate"] = _sndobj.aiff_head_rate_get
    if _newclass:rate = _swig_property(_sndobj.aiff_head_rate_get, _sndobj.aiff_head_rate_set)
    def __init__(self): 
        this = _sndobj.new_aiff_head()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_aiff_head
    __del__ = lambda self : None;
aiff_head_swigregister = _sndobj.aiff_head_swigregister
aiff_head_swigregister(aiff_head)

class SndAiff(SndFIO):
    __swig_setmethods__ = {}
    for _s in [SndFIO]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndAiff, name, value)
    __swig_getmethods__ = {}
    for _s in [SndFIO]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SndAiff, name)
    __repr__ = _swig_repr
    def IsAiff(self): return _sndobj.SndAiff_IsAiff(self)
    def __init__(self, *args): 
        this = _sndobj.new_SndAiff(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndAiff
    __del__ = lambda self : None;
    def Read(self): return _sndobj.SndAiff_Read(self)
    def Write(self): return _sndobj.SndAiff_Write(self)
    def ErrorMessage(self): return _sndobj.SndAiff_ErrorMessage(self)
SndAiff_swigregister = _sndobj.SndAiff_swigregister
SndAiff_swigregister(SndAiff)
sizFormHdr = cvar.sizFormHdr
sizCommChunk1 = cvar.sizCommChunk1
sizCommChunk2 = cvar.sizCommChunk2
sizSoundDataHdr = cvar.sizSoundDataHdr
aiffhdrsiz = cvar.aiffhdrsiz
onept = cvar.onept
log10d20 = cvar.log10d20
ULPOW2TO31 = cvar.ULPOW2TO31
DPOW2TO31 = cvar.DPOW2TO31

class SndBuffer(SndIO):
    __swig_setmethods__ = {}
    for _s in [SndIO]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndBuffer, name, value)
    __swig_getmethods__ = {}
    for _s in [SndIO]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SndBuffer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SndBuffer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndBuffer
    __del__ = lambda self : None;
    def Write(self): return _sndobj.SndBuffer_Write(self)
    def Read(self): return _sndobj.SndBuffer_Read(self)
    def wait_here(self): return _sndobj.SndBuffer_wait_here(self)
    def ErrorMessage(self): return _sndobj.SndBuffer_ErrorMessage(self)
SndBuffer_swigregister = _sndobj.SndBuffer_swigregister
SndBuffer_swigregister(SndBuffer)


def MidiDeviceList():
  return _sndobj.MidiDeviceList()
MidiDeviceList = _sndobj.MidiDeviceList

def MidiInputDeviceName(*args):
  return _sndobj.MidiInputDeviceName(*args)
MidiInputDeviceName = _sndobj.MidiInputDeviceName
NOTE_MESSAGE = _sndobj.NOTE_MESSAGE
PBEND_MESSAGE = _sndobj.PBEND_MESSAGE
MOD_MESSAGE = _sndobj.MOD_MESSAGE
BREATH_MESSAGE = _sndobj.BREATH_MESSAGE
FREE1 = _sndobj.FREE1
FOOT_MESSAGE = _sndobj.FOOT_MESSAGE
PORT_MESSAGE = _sndobj.PORT_MESSAGE
VOL_MESSAGE = _sndobj.VOL_MESSAGE
BAL_MESSAGE = _sndobj.BAL_MESSAGE
FREE2 = _sndobj.FREE2
PAN_MESSAGE = _sndobj.PAN_MESSAGE
EXPR_MESSAGE = _sndobj.EXPR_MESSAGE
class MIDI_event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MIDI_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MIDI_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg"] = _sndobj.MIDI_event_msg_set
    __swig_getmethods__["msg"] = _sndobj.MIDI_event_msg_get
    if _newclass:msg = _swig_property(_sndobj.MIDI_event_msg_get, _sndobj.MIDI_event_msg_set)
    def __init__(self): 
        this = _sndobj.new_MIDI_event()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_MIDI_event
    __del__ = lambda self : None;
MIDI_event_swigregister = _sndobj.MIDI_event_swigregister
MIDI_event_swigregister(MIDI_event)
POLYAFTOUCH_MESSAGE = cvar.POLYAFTOUCH_MESSAGE
PROGRAM_MESSAGE = cvar.PROGRAM_MESSAGE
AFTOUCH_MESSAGE = cvar.AFTOUCH_MESSAGE
VELOCITY_MESSAGE = cvar.VELOCITY_MESSAGE
NOTEOFF_MESSAGE = cvar.NOTEOFF_MESSAGE
OUTOFRANGE = cvar.OUTOFRANGE

class midi_msg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, midi_msg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, midi_msg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["event"] = _sndobj.midi_msg_event_set
    __swig_getmethods__["event"] = _sndobj.midi_msg_event_get
    if _newclass:event = _swig_property(_sndobj.midi_msg_event_get, _sndobj.midi_msg_event_set)
    __swig_setmethods__["dword"] = _sndobj.midi_msg_dword_set
    __swig_getmethods__["dword"] = _sndobj.midi_msg_dword_get
    if _newclass:dword = _swig_property(_sndobj.midi_msg_dword_get, _sndobj.midi_msg_dword_set)
    def __init__(self): 
        this = _sndobj.new_midi_msg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_midi_msg
    __del__ = lambda self : None;
midi_msg_swigregister = _sndobj.midi_msg_swigregister
midi_msg_swigregister(midi_msg)

class SndMidi(SndIO):
    __swig_setmethods__ = {}
    for _s in [SndIO]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndMidi, name, value)
    __swig_getmethods__ = {}
    for _s in [SndIO]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SndMidi, name)
    __repr__ = _swig_repr
    def NoteOn(self): return _sndobj.SndMidi_NoteOn(self)
    def NoteOff(self): return _sndobj.SndMidi_NoteOff(self)
    def LastNote(self): return _sndobj.SndMidi_LastNote(self)
    def Velocity(self, *args): return _sndobj.SndMidi_Velocity(self, *args)
    def LastNoteVelocity(self): return _sndobj.SndMidi_LastNoteVelocity(self)
    def Aftertouch(self, *args): return _sndobj.SndMidi_Aftertouch(self, *args)
    def LastNoteAftertouch(self): return _sndobj.SndMidi_LastNoteAftertouch(self)
    def GetMessage(self, *args): return _sndobj.SndMidi_GetMessage(self, *args)
    def NewMessage(self, *args): return _sndobj.SndMidi_NewMessage(self, *args)
    def __init__(self, *args): 
        this = _sndobj.new_SndMidi(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndMidi
    __del__ = lambda self : None;
    def ErrorMessage(self): return _sndobj.SndMidi_ErrorMessage(self)
SndMidi_swigregister = _sndobj.SndMidi_swigregister
SndMidi_swigregister(SndMidi)

class SndMidiIn(SndMidi):
    __swig_setmethods__ = {}
    for _s in [SndMidi]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndMidiIn, name, value)
    __swig_getmethods__ = {}
    for _s in [SndMidi]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SndMidiIn, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SndMidiIn(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndMidiIn
    __del__ = lambda self : None;
    def Read(self): return _sndobj.SndMidiIn_Read(self)
    def ErrorMessage(self): return _sndobj.SndMidiIn_ErrorMessage(self)
SndMidiIn_swigregister = _sndobj.SndMidiIn_swigregister
SndMidiIn_swigregister(SndMidiIn)

def midiInputHandler(*args):
  return _sndobj.midiInputHandler(*args)
midiInputHandler = _sndobj.midiInputHandler

class SndASIO(SndIO):
    __swig_setmethods__ = {}
    for _s in [SndIO]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndASIO, name, value)
    __swig_getmethods__ = {}
    for _s in [SndIO]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SndASIO, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SndASIO(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndASIO
    __del__ = lambda self : None;
    def Write(self): return _sndobj.SndASIO_Write(self)
    def Read(self): return _sndobj.SndASIO_Read(self)
    def ErrorMessage(self): return _sndobj.SndASIO_ErrorMessage(self)
SndASIO_swigregister = _sndobj.SndASIO_swigregister
SndASIO_swigregister(SndASIO)


def DriverList():
  return _sndobj.DriverList()
DriverList = _sndobj.DriverList

def DriverName(*args):
  return _sndobj.DriverName(*args)
DriverName = _sndobj.DriverName

def bufferSwitch(*args):
  return _sndobj.bufferSwitch(*args)
bufferSwitch = _sndobj.bufferSwitch

def bufferSwitchTimeInfo(*args):
  return _sndobj.bufferSwitchTimeInfo(*args)
bufferSwitchTimeInfo = _sndobj.bufferSwitchTimeInfo

def sampleRateChanged(*args):
  return _sndobj.sampleRateChanged(*args)
sampleRateChanged = _sndobj.sampleRateChanged

def asioMessages(*args):
  return _sndobj.asioMessages(*args)
asioMessages = _sndobj.asioMessages

def ListDevices():
  return _sndobj.ListDevices()
ListDevices = _sndobj.ListDevices

def InputDeviceName(*args):
  return _sndobj.InputDeviceName(*args)
InputDeviceName = _sndobj.InputDeviceName

def OutputDeviceName(*args):
  return _sndobj.OutputDeviceName(*args)
OutputDeviceName = _sndobj.OutputDeviceName
class SndRTIO(SndIO):
    __swig_setmethods__ = {}
    for _s in [SndIO]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndRTIO, name, value)
    __swig_getmethods__ = {}
    for _s in [SndIO]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SndRTIO, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sndobj.new_SndRTIO(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndRTIO
    __del__ = lambda self : None;
    def Write(self): return _sndobj.SndRTIO_Write(self)
    def Read(self): return _sndobj.SndRTIO_Read(self)
    def ErrorMessage(self): return _sndobj.SndRTIO_ErrorMessage(self)
SndRTIO_swigregister = _sndobj.SndRTIO_swigregister
SndRTIO_swigregister(SndRTIO)
DEF_DEV = cvar.DEF_DEV
DEF_BSIZE = cvar.DEF_BSIZE
DEF_PERIOD = cvar.DEF_PERIOD

SINE = _sndobj.SINE
SAW = _sndobj.SAW
SQUARE = _sndobj.SQUARE
BUZZ = _sndobj.BUZZ
class HarmTable(Table):
    __swig_setmethods__ = {}
    for _s in [Table]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HarmTable, name, value)
    __swig_getmethods__ = {}
    for _s in [Table]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HarmTable, name)
    __repr__ = _swig_repr
    def SetHarm(self, *args): return _sndobj.HarmTable_SetHarm(self, *args)
    def ErrorMessage(self): return _sndobj.HarmTable_ErrorMessage(self)
    def MakeTable(self): return _sndobj.HarmTable_MakeTable(self)
    def SetPhase(self, *args): return _sndobj.HarmTable_SetPhase(self, *args)
    def __init__(self, *args): 
        this = _sndobj.new_HarmTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_HarmTable
    __del__ = lambda self : None;
HarmTable_swigregister = _sndobj.HarmTable_swigregister
HarmTable_swigregister(HarmTable)

class UsrHarmTable(Table):
    __swig_setmethods__ = {}
    for _s in [Table]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UsrHarmTable, name, value)
    __swig_getmethods__ = {}
    for _s in [Table]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UsrHarmTable, name)
    __repr__ = _swig_repr
    def SetHarm(self, *args): return _sndobj.UsrHarmTable_SetHarm(self, *args)
    def ErrorMessage(self): return _sndobj.UsrHarmTable_ErrorMessage(self)
    def MakeTable(self): return _sndobj.UsrHarmTable_MakeTable(self)
    def __init__(self, *args): 
        this = _sndobj.new_UsrHarmTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_UsrHarmTable
    __del__ = lambda self : None;
UsrHarmTable_swigregister = _sndobj.UsrHarmTable_swigregister
UsrHarmTable_swigregister(UsrHarmTable)

class TrisegTable(Table):
    __swig_setmethods__ = {}
    for _s in [Table]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrisegTable, name, value)
    __swig_getmethods__ = {}
    for _s in [Table]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrisegTable, name)
    __repr__ = _swig_repr
    def SetCurve(self, *args): return _sndobj.TrisegTable_SetCurve(self, *args)
    def ErrorMessage(self): return _sndobj.TrisegTable_ErrorMessage(self)
    def MakeTable(self): return _sndobj.TrisegTable_MakeTable(self)
    def __init__(self, *args): 
        this = _sndobj.new_TrisegTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_TrisegTable
    __del__ = lambda self : None;
TrisegTable_swigregister = _sndobj.TrisegTable_swigregister
TrisegTable_swigregister(TrisegTable)

class EnvTable(Table):
    __swig_setmethods__ = {}
    for _s in [Table]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnvTable, name, value)
    __swig_getmethods__ = {}
    for _s in [Table]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnvTable, name)
    __repr__ = _swig_repr
    def SetEnvelope(self, *args): return _sndobj.EnvTable_SetEnvelope(self, *args)
    def ErrorMessage(self): return _sndobj.EnvTable_ErrorMessage(self)
    def MakeTable(self): return _sndobj.EnvTable_MakeTable(self)
    def __init__(self, *args): 
        this = _sndobj.new_EnvTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_EnvTable
    __del__ = lambda self : None;
EnvTable_swigregister = _sndobj.EnvTable_swigregister
EnvTable_swigregister(EnvTable)

class SndTable(Table):
    __swig_setmethods__ = {}
    for _s in [Table]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndTable, name, value)
    __swig_getmethods__ = {}
    for _s in [Table]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SndTable, name)
    __repr__ = _swig_repr
    def SetInput(self, *args): return _sndobj.SndTable_SetInput(self, *args)
    def ErrorMessage(self): return _sndobj.SndTable_ErrorMessage(self)
    def MakeTable(self): return _sndobj.SndTable_MakeTable(self)
    def __init__(self, *args): 
        this = _sndobj.new_SndTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SndTable
    __del__ = lambda self : None;
SndTable_swigregister = _sndobj.SndTable_swigregister
SndTable_swigregister(SndTable)

class PlnTable(Table):
    __swig_setmethods__ = {}
    for _s in [Table]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlnTable, name, value)
    __swig_getmethods__ = {}
    for _s in [Table]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlnTable, name)
    __repr__ = _swig_repr
    def SetPln(self, *args): return _sndobj.PlnTable_SetPln(self, *args)
    def ErrorMessage(self): return _sndobj.PlnTable_ErrorMessage(self)
    def MakeTable(self): return _sndobj.PlnTable_MakeTable(self)
    def __init__(self, *args): 
        this = _sndobj.new_PlnTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_PlnTable
    __del__ = lambda self : None;
PlnTable_swigregister = _sndobj.PlnTable_swigregister
PlnTable_swigregister(PlnTable)

class HammingTable(Table):
    __swig_setmethods__ = {}
    for _s in [Table]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HammingTable, name, value)
    __swig_getmethods__ = {}
    for _s in [Table]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HammingTable, name)
    __repr__ = _swig_repr
    def SetParam(self, *args): return _sndobj.HammingTable_SetParam(self, *args)
    def ErrorMessage(self): return _sndobj.HammingTable_ErrorMessage(self)
    def MakeTable(self): return _sndobj.HammingTable_MakeTable(self)
    def __init__(self, *args): 
        this = _sndobj.new_HammingTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_HammingTable
    __del__ = lambda self : None;
HammingTable_swigregister = _sndobj.HammingTable_swigregister
HammingTable_swigregister(HammingTable)

class NoteTable(Table):
    __swig_setmethods__ = {}
    for _s in [Table]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoteTable, name, value)
    __swig_getmethods__ = {}
    for _s in [Table]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoteTable, name)
    __repr__ = _swig_repr
    def SetFreqInterval(self, *args): return _sndobj.NoteTable_SetFreqInterval(self, *args)
    def SetNoteInterval(self, *args): return _sndobj.NoteTable_SetNoteInterval(self, *args)
    def __init__(self, *args): 
        this = _sndobj.new_NoteTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_NoteTable
    __del__ = lambda self : None;
    def MakeTable(self): return _sndobj.NoteTable_MakeTable(self)
    def ErrorMessage(self): return _sndobj.NoteTable_ErrorMessage(self)
NoteTable_swigregister = _sndobj.NoteTable_swigregister
NoteTable_swigregister(NoteTable)

class UsrDefTable(Table):
    __swig_setmethods__ = {}
    for _s in [Table]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UsrDefTable, name, value)
    __swig_getmethods__ = {}
    for _s in [Table]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UsrDefTable, name)
    __repr__ = _swig_repr
    def SetTable(self, *args): return _sndobj.UsrDefTable_SetTable(self, *args)
    def ErrorMessage(self): return _sndobj.UsrDefTable_ErrorMessage(self)
    def MakeTable(self): return _sndobj.UsrDefTable_MakeTable(self)
    def __init__(self, *args): 
        this = _sndobj.new_UsrDefTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_UsrDefTable
    __del__ = lambda self : None;
UsrDefTable_swigregister = _sndobj.UsrDefTable_swigregister
UsrDefTable_swigregister(UsrDefTable)

class LoPassTable(Table):
    __swig_setmethods__ = {}
    for _s in [Table]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoPassTable, name, value)
    __swig_getmethods__ = {}
    for _s in [Table]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LoPassTable, name)
    __repr__ = _swig_repr
    def ErrorMessage(self): return _sndobj.LoPassTable_ErrorMessage(self)
    def MakeTable(self): return _sndobj.LoPassTable_MakeTable(self)
    def SetFreq(self, *args): return _sndobj.LoPassTable_SetFreq(self, *args)
    def SetSr(self, *args): return _sndobj.LoPassTable_SetSr(self, *args)
    def __init__(self, *args): 
        this = _sndobj.new_LoPassTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_LoPassTable
    __del__ = lambda self : None;
LoPassTable_swigregister = _sndobj.LoPassTable_swigregister
LoPassTable_swigregister(LoPassTable)

class PVEnvTable(Table):
    __swig_setmethods__ = {}
    for _s in [Table]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVEnvTable, name, value)
    __swig_getmethods__ = {}
    for _s in [Table]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PVEnvTable, name)
    __repr__ = _swig_repr
    def SetEnvelope(self, *args): return _sndobj.PVEnvTable_SetEnvelope(self, *args)
    def SetSr(self, *args): return _sndobj.PVEnvTable_SetSr(self, *args)
    def ErrorMessage(self): return _sndobj.PVEnvTable_ErrorMessage(self)
    def MakeTable(self): return _sndobj.PVEnvTable_MakeTable(self)
    def __init__(self, *args): 
        this = _sndobj.new_PVEnvTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_PVEnvTable
    __del__ = lambda self : None;
PVEnvTable_swigregister = _sndobj.PVEnvTable_swigregister
PVEnvTable_swigregister(PVEnvTable)

class SpecEnvTable(PVEnvTable):
    __swig_setmethods__ = {}
    for _s in [PVEnvTable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecEnvTable, name, value)
    __swig_getmethods__ = {}
    for _s in [PVEnvTable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpecEnvTable, name)
    __repr__ = _swig_repr
    def MakeTable(self): return _sndobj.SpecEnvTable_MakeTable(self)
    def __init__(self, *args): 
        this = _sndobj.new_SpecEnvTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_SpecEnvTable
    __del__ = lambda self : None;
SpecEnvTable_swigregister = _sndobj.SpecEnvTable_swigregister
SpecEnvTable_swigregister(SpecEnvTable)

class PVTable(Table):
    __swig_setmethods__ = {}
    for _s in [Table]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVTable, name, value)
    __swig_getmethods__ = {}
    for _s in [Table]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PVTable, name)
    __repr__ = _swig_repr
    def SetTable(self, *args): return _sndobj.PVTable_SetTable(self, *args)
    def MakeTable(self): return _sndobj.PVTable_MakeTable(self)
    def __init__(self, *args): 
        this = _sndobj.new_PVTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_PVTable
    __del__ = lambda self : None;
    def ErrorMessage(self): return _sndobj.PVTable_ErrorMessage(self)
PVTable_swigregister = _sndobj.PVTable_swigregister
PVTable_swigregister(PVTable)

class ImpulseTable(SpecEnvTable):
    __swig_setmethods__ = {}
    for _s in [SpecEnvTable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImpulseTable, name, value)
    __swig_getmethods__ = {}
    for _s in [SpecEnvTable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImpulseTable, name)
    __repr__ = _swig_repr
    def SetWindow(self, *args): return _sndobj.ImpulseTable_SetWindow(self, *args)
    def MakeTable(self): return _sndobj.ImpulseTable_MakeTable(self)
    def __init__(self, *args): 
        this = _sndobj.new_ImpulseTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sndobj.delete_ImpulseTable
    __del__ = lambda self : None;
ImpulseTable_swigregister = _sndobj.ImpulseTable_swigregister
ImpulseTable_swigregister(ImpulseTable)



